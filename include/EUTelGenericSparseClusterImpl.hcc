/*
 *   This source code is part of the Eutelescope package of Marlin.
 *   You are free to use this source files for your own development as
 *   long as it stays in a public research context. You are not
 *   allowed to use it for commercial purpose. You must put this
 *   header with author names in all development based on this file.
 *
 */

#ifndef EUTELGENERICSPARSECLUSTERIMPL_HCC
#define EUTELGENERICSPARSECLUSTERIMPL_HCC

#include "EUTelTrackerDataInterfacerImpl.h"
#include "EUTELESCOPE.h"
#include <UTIL/CellIDDecoder.h>

namespace eutelescope {

//! Implementation of a cluster made of sparsified pixels
/*! This is a group of sparsified pixels having fulfilling the
 *  proximity requirement.
 *
 *  The shape and the size of the cluster is a priori undefined.
 *
 *  The sparse pixel information are stored in the TrackerData using
 *  one of the sparse pixel implementation, via the addPixel()
 *  method.
 */
template<class PixelType> 
class EUTelGenericSparseClusterImpl : public EUTelSimpleVirtualCluster
{
  public:
	//! Default constructor
	EUTelGenericSparseClusterImpl(IMPL::TrackerDataImpl* data);

	//! Destructor
	virtual ~EUTelGenericSparseClusterImpl() {}

	//! Get the cluster dimensions
	/*! For each cluster type is always possible to define the
	 *  external sizes. 
	 *
	 *  @param xSize The size along x
	 *  @param ySize The size along y
	 */ 
	virtual void getClusterSize(int& xSize, int& ySize) const ;

	//! Get the cluster dimensions via a box around it
	/*! A rectangle is put around the cluster and the
	     *  size as well as the centre are returnd
	 *
	 *  @param xPos The position along x
	 *  @param yPos The position along y
	 *  @param xSize The size along x
	 *  @param ySize The size along y
	 */ 
	virtual void getClusterInfo(int& xPos, int& yPos, int& xSize, int& ySize) const;

	//! Get the cluster centre of gravity
	/*! Computes the centre of gravity by weighting
	 *  pixel via their charge, results returned via
	 *  reference (same for y):
	 *
	 *  x_pos = sum((x_pos)_i*signal_i)/sum(signal_i)
	 *
	 *  @param xCoG The cog along x
	 *  @param yCoG The cog along y
	 */ 
	virtual void getCenterOfGravity(float& xCoG, float& yCoG) const;

	//! Return the total charge
	/*!
	 *  @return The total integrated charge
	 */
	virtual float getTotalCharge() const ;

	//! Return a pointer to the TrackerDataImpl
	/*! This method is used to expose to the public the
	 *  TrackerDataImpl member.
	 *
	 *  @return The pointer of _trackerData
	 */
	virtual IMPL::TrackerDataImpl* trackerData()  { return _trackerData; } 

	//! Print
	/*! This method is used to print out the content of the clusters
	 * 
	 *  @param os The input output stream
	 */
	virtual void print(std::ostream& os) const ;

	////////////////////////////////////////////////////////
	//                                                    //
	//                IMPLEMENTATION                      //
	//                  SPECIFIC                          //
	//                                                    //
	////////////////////////////////////////////////////////

	//! Get the number of sparse pixels in the collection
	/*! This utility can be used to know how many pixels are contained
	 *  in the TrackerData.
	 *
	 *  @return the size of TrackerData measured in sparse
	 *  pixels. 
	 */ 
	unsigned int size() const ;

	//! Check if there are any sparse pixels in the collection
	/*! 
	 *  @return TrackerData.empty()
	 */ 
	bool empty() const ;

	//! Get the type of sparsified pixel
	/*! This method is used to get the type of sparsified pixel
	 *  contained in the cluster. 
	 *
	 *  It is implementation specific and it is not available in the
	 *  virtual interface since not all kind of clusters are made by
	 *  sparsified pixels
	 *
	 *  @return The sparse pixel type using the SparsePixelType enum
	 *
	 *  @see SparsePixelType
	 */
	SparsePixelType getSparsePixelType() const 
	{
		UTIL::CellIDDecoder<TrackerDataImpl > cellDecoder( EUTELESCOPE::ZSCLUSTERDEFAULTENCODING );
		return static_cast<SparsePixelType>(static_cast<lcio::long64>(cellDecoder(_trackerData)["sparsePixelType"]));
	}

	//! Get one of the sparse pixel
	/*! This method is used to get one of the sparse pixel contained
	 *  into the TrackerData. Not mutant version.
	 *
	 *  @param index Index of the sparse pixel within the collection
	 *  @param pixel A pointer to the retrieved pixel.
	 *  @return A pointer to the retrieved pixel same as @c pixel
	 */ 
	PixelType* getSparsePixelAt(unsigned int index, PixelType* pixel) const
	{
		return _rawDataInterfacer.getSparsePixelAt(index, pixel);
	}

	//! Add a sparse pixel via a pointer to the pixel
	/*! This method is used to add to the current TrackerDataImpl a
	 *  new sparse pixel with all the pieces of information.
	 */
	void addSparsePixel(PixelType* pixel)
	{
		_rawDataInterfacer.addSparsePixel(pixel);
	}

  protected: 
	//! The number of elements in the data structure
	unsigned int _nElement;

	//! The sparse pixel type enumerator
	SparsePixelType _type;

	//! The interfacer to the raw data
	EUTelTrackerDataInterfacerImpl<PixelType> _rawDataInterfacer;

private:
	DISALLOW_COPY_AND_ASSIGN(EUTelGenericSparseClusterImpl)
};
} //namespace
#endif
