<?xml version="1.0" encoding="us-ascii"?>
<!-- ?xml-stylesheet type="text/xsl" href="http://ilcsoft.desy.de/marlin/marlin.xsl"? -->
<!-- ?xml-stylesheet type="text/xsl" href="marlin.xsl"? -->


<!--

==========================================================================================
Steering file template for the pysub framework

==> clusearch-tmp.xml <===

Author: Antonio Bulgheroni, INFN <mailto:antonio.bulgheroni@gmail.com>
Version: $Id: clusearch-tmp.xml,v 1.9 2009-08-01 10:41:44 bulgheroni Exp $
==========================================================================================

-->

<marlin xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ilcsoft.desy.de/marlin/marlin.xsd">

  <execute>
    <processor name="AIDA"/>
      <processor name="MyEUTelUtilityPrintEventNumber"/>
      <processor name="Mimosa26EUTelAutoPedestalNoiseProcessor"/>
      <processor name="LoadHotPixelDB"/>
      <processor name="Clustering"/>
      <processor name="APIXClustering"/>
      <processor name="Correlator"/>
    <processor name="Save"/>
  </execute>

  <global>
    <parameter name="LCIOInputFiles"> @LcioPath@/run@RunNumber@-converter.slcio </parameter>
    <parameter name="GearXMLFile" value="@GearFilePath@/@GearFile@"/>
    <parameter name="MaxRecordNumber" value="@MaxRecordNumber@"/>
    <parameter name="SkipNEvents" value="0"/>
    <parameter name="SupressCheck" value="false"/>
    <parameter name="Verbosity" value="MESSAGE4"/>
  </global>

  <processor name="AIDA" type="AIDAProcessor">
    <!--Processor that handles AIDA files. Creates on directory per processor.  Processors only need to create and fill the histograms, clouds and tuples. Needs to be the first ActiveProcessor-->
    <!-- compression of output file 0: false >0: true (default) -->
    <parameter name="Compress" type="int" value="1"/>
    <!-- filename without extension-->
     <parameter name="FileName" type="string" value=
    "@HistogramPath@/run@RunNumber@-clu-histo@MemCheckFlag@"/>
    <!-- type of output file xml (default) or root ( only OpenScientist)-->
    <parameter name="FileType" type="string" value="root"/>
  </processor>


 <processor name="Mimosa26EUTelAutoPedestalNoiseProcessor" type="EUTelAutoPedestalNoiseProcessor">
 <!--EUTelAutoPedestalNoiseProcessor produces initial pedestal / noise / status with user provided values-->
  <!--Noise local collection-->
  <parameter name="NoiseCollectionName" type="string" lcioOutType="TrackerData"> m26_noise </parameter>
  <!--Pedestal local collection-->
  <parameter name="PedestalCollectionName" type="string" lcioOutType="TrackerData"> m26_pedestal </parameter>
  <!--Pixel status collection-->
  <parameter name="StatusCollectionName" type="string" lcioOutType="TrackerRawData"> m26_status </parameter>
  <!--The initial value of noise (one value for detector)-->
  <parameter name="InitNoiseValue" type="FloatVec"> 1 1 1 1 1 1 </parameter>
  <!--The initial value of pedestal (one value for detector)-->
  <parameter name="InitPedestalValue" type="FloatVec"> 0 0 0 0 0 0 </parameter>
  <!--The maximum pixel along x (default 255, one value per detector)-->
  <parameter name="MaxXVector" type="IntVec"> 1151 1151 1151 1151 1151 1151</parameter>
  <!--The maximum pixel along y (default 255, one value per detector)-->
  <parameter name="MaxYVector" type="IntVec"> 575 575 575 575 575 575  </parameter>
  <!--The minimum pixel along x (default 0, one value per detector)-->
  <parameter name="MinXVector" type="IntVec"> 0 0 0 0 0 0  </parameter>
  <!--The minimum pixel along y (default 0, one value per detector)-->
  <parameter name="MinYVector" type="IntVec"> 0 0 0 0 0 0</parameter>
  <!--The sensorID for the generated collection (one per detector)-->
  <parameter name="SensorIDVec" type="IntVec"> 0 1 2 3 4 5 </parameter>
</processor>

  <processor name="LoadHotPixelDB" type="ConditionsProcessor">
    <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
    <!--Initialization of a conditions database handler-->
    <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
    <!--Initialization of a conditions db file handler-->
    <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
    <!--Initialization string for conditions database-->
    <parameter name="DBInit" type="string" value="localhost:lccd_test:calvin:hobbes"/>
    <!--Initialization of a data file handler-->
    <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
    <!--Initialization of a simple conditions file handler-->
    <!-- suppress only the Mimosa26 pixels --> 
    <parameter name="SimpleFileHandler" type="StringVec"> hotpixel_m26  @DatabasePath@/run@HotPixelRunNumber@-hotpixel.slcio hotpixel_m26 </parameter>
  </processor>


  <processor name="Clustering" type="EUTelProcessorClustering">
    <!--EUTelClusteringProcessor is looking for clusters into a calibrated pixel matrix.-->
   
   <!--Input of Zero Suppressed data-->
    <parameter name="ZSDataCollectionName" type="string" lcioInType="TrackerData"> zsdata_m26 </parameter>
    <!--Cluster (output) collection name-->
    <parameter name="ClusterCollectionName" type="string" lcioOutType="TrackerPulse"> cluster_m26 </parameter>

   <!--
        HISTOGRAMMING
    -->
    <!--This is the name of the histogram information file-->
    <parameter name="HistoInfoFileName" type="string" value="@HistoInfoFile@"/>
    <parameter name="Verbosity" value="@Verbosity@"/>

  </processor>

 
  <processor name="APIXClustering" type="EUTelProcessorClustering">
   <!--This is the name of the histogram information file-->
    <!--Input of Zero Suppressed data-->
    <parameter name="ZSDataCollectionName" type="string" lcioInType="TrackerData"> zsdata_apix </parameter>
    <!--Cluster (output) collection name-->
    <parameter name="ClusterCollectionName" type="string" lcioOutType="TrackerPulse"> cluster_apix </parameter>

    <parameter name="HistoInfoFileName" type="string" value="@HistoInfoFile@"/>
   <!--
    <parameter name="ClusterLimits" type="IntVec"> @ClusterLimits@</parameter>
    <parameter name="MinLVL1Difference" type="Int">0</parameter>
    <parameter name="MinLVL1" type="Int">5</parameter>
    <parameter name="MaxLVL1" type="Int">7</parameter>
         -->
    <parameter name="Verbosity" value="@Verbosity@"/>
 </processor>

  <processor name="Correlator" type="EUTelCorrelator">
    <!--EUTelCorrelator fills histograms with correlation plots-->
    <!--Cluster (pulse) collection name-->
    <parameter name="InputClusterCollections" type="StringVec" > cluster_m26 cluster_apix </parameter>
    <!-- -->
    <parameter name="ClusterChargeMinimum" type="int" value="1"/>
    <!-- -->
    <parameter name="MinNumberOfCorrelatedHits" type="int" value="6"/>
    <parameter name="Events"  type="int" value="999"/>

    <!--Residual cuts along both size in microns-->
    <parameter name="ResidualsXMax" type="FloatVec">  @ResidualsXMax@         </parameter>
    <parameter name="ResidualsXMin" type="FloatVec">  @ResidualsXMin@         </parameter>
    <parameter name="ResidualsYMax" type="FloatVec">  @ResidualsYMax@         </parameter>
    <parameter name="ResidualsYMin" type="FloatVec">  @ResidualsYMin@         </parameter>

    <!--Name of histogram info xml file-->
    <parameter name="HistogramInfoFilename" type="string" value="@HistoInfoFile@"/>
    <parameter name="Verbosity" value="@Verbosity@"/>
  </processor>

  <processor name="HotPixelKiller" type="EUTelHotPixelKiller">
    <!--EUTelHotPixelKiller periodically check for pixel singing loud too often and remove them from the analysis-->
    <!--Pixel status collection-->
    <parameter name="StatusCollectionName" type="string" lcioInType="TrackerRawData"> m26_status </parameter>
    <!--This float number [0,1] represents the maximum allowed firing frequency
        within the selected number of event per cycle-->
    <parameter name="MaxAllowedFiringFreq" type="float" value="0.01"/>
    <!--The number of events to be considered for each update cycle-->
    <parameter name="NoOfEventPerCycle" type="int" value="1000"/>
    <!--The total number of hot pixel cycle-->
    <parameter name="TotalNoOfCycle" type="int" value="0"/>
  </processor>

  <processor name="Save" type="EUTelOutputProcessor">
    <!--Writes the current event to the specified LCIO outputfile. Eventually it adds a EORE at the of the file if it was missing Needs to be the last ActiveProcessor.-->
    <!--drops the named collections from the event-->
    <parameter name="DropCollectionNames" type="StringVec"> 
           rawdata status noise pedestal data zsdata 
            zsdata_m26 zsdata_apix
    </parameter>
    <!--drops all collections of the given type from the event-->
    <!--parameter name="DropCollectionTypes" type="StringVec"> SimTrackerHit SimCalorimeterHit </parameter-->
    <!-- write complete objects in subset collections to the file (i.e. ignore subset flag)-->
    <!--parameter name="FullSubsetCollections" type="StringVec" value="MCParticlesSkimmed"/-->
    <!--force keep of the named collections - overrules DropCollectionTypes (and DropCollectionNames)-->
    <!--parameter name="KeepCollectionNames" type="StringVec" value="MyPreciousSimTrackerHits"/-->
    <!-- name of output file -->
    <parameter name="LCIOOutputFile" type="string" value="@LcioPath@/run@RunNumber@-clustering@MemCheckFlag@.slcio"/>
    <!--write mode for output file:  WRITE_APPEND or WRITE_NEW-->
    <parameter name="LCIOWriteMode" type="string" value="WRITE_NEW"/>
    <!--Set it to true to remove intermediate EORE in merged runs-->
    <parameter name="SkipIntermediateEORE" type="bool" value="true"/>
    <!--will split output file if size in kB exceeds given value - doesn't work with APPEND and NEW-->
    <!--parameter name="SplitFileSizekB" type="int" value="500000"/-->
  </processor>

 <processor name="MyEUTelUtilityPrintEventNumber" type="EUTelUtilityPrintEventNumber">
 <!--EUTelUtilityPrintEventNumber prints event number to screen depending on the verbosity level-->
  <!--Print event number for every n-th event-->
  <parameter name="EveryNEvents" type="int" value="1000"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
  <!--print the event timestamp as read from LCIO-->
  <!--parameter name="printTimestamp" type="bool" value="false"/-->
</processor>


</marlin>
