<?xml version="1.0" encoding="us-ascii"?>
<!-- ?xml-stylesheet type="text/xsl" href="http://ilcsoft.desy.de/marlin/marlin.xsl"? -->
<!-- ?xml-stylesheet type="text/xsl" href="marlin.xsl"? -->

<!--
============================================================================================================================
   Steering File generated by Marlin GUI on Fri Aug  2 11:30:50 2013

   WARNING: - Please be aware that comments made in the original steering file were lost.
            - Processors that are not installed in your Marlin binary lost their parameter's descriptions and types as well.
            - Extra parameters that aren't categorized as default in a processor lost their description and type.
============================================================================================================================
-->


<marlin xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ilcsoft.desy.de/marlin/marlin.xsd">

   <execute>
      <processor name="AIDA"/>
      <processor name="LoadRefHitDB"/>
      <processor name="LoadPreAlignment"/>
      <processor name="ApplyPreAlignment"/>
      <processor name="AlignStraight"/>
      <processor name="MyEUTelUtilityPrintEventNumber"/>
   </execute>

   <global>
      <parameter name="LCIOInputFiles"> @LcioPath@/@FilePrefix@-hitmaker.slcio </parameter>
      <parameter name="GearXMLFile" value="@GearFilePath@/@GearFile@"/>
      <parameter name="MaxRecordNumber" value="@MaxRecordNumber@"/>
      <parameter name="SkipNEvents" value="@SkipNEvents@"/>
      <parameter name="SupressCheck" value="false"/>
      <parameter name="Verbosity" value="@Verbosity@"/>
   </global>

 <processor name="AIDA" type="AIDAProcessor">
 <!--Processor that handles AIDA files. Creates on directory per processor.  Processors only need to create and fill the histograms, clouds and tuples. Needs to be the first ActiveProcessor-->
  <!-- compression of output file 0: false >0: true (default) -->
  <parameter name="Compress" type="int" value="1"/>
  <!-- filename without extension-->
  <parameter name="FileName" type="string" value="@HistogramPath@/@FilePrefix@-alignment"/>
  <!-- type of output file root (default) or xml )-->
  <parameter name="FileType" type="string" value="root"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="LoadRefHitDB" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:align:tel"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> referenceHit @DatabasePath@/@FilePrefix@-referencehit.slcio referenceHit </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="LoadPreAlignment" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:align:tel"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> prealign @DatabasePath@/@FilePrefix@-prealignment.slcio alignment </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="ApplyPreAlignment" type="EUTelApplyAlignmentProcessor">
 <!--Apply to the input hit the alignment corrections-->
  <!--Alignment constant from the condition file-->
  <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> prealign </parameter>
  <!--The name of the input hit collection-->
  <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> hit </parameter>
  <!--The name of the output hit collection-->
  <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> PreAlignedHit </parameter>
  <!--Rotation Angle around X axis-->
  <!--parameter name="Alpha" type="double" value="0"/-->
  <!--Available directions are:
 0 -> direct  
 1 -> reverse -->
  <parameter name="ApplyAlignmentDirection" type="int" value="0"/>
  <!--Do you want the reference hit collection to be corrected by the shifts and tilts from the alignment collection?-->
  <parameter name="ApplyToReferenceCollection" type="bool" value="1"/>
  <!--Rotation Angle around Y axis-->
  <!--parameter name="Beta" type="double" value="0"/-->
  <!--Available methods are:
 0 -> shift only 
 1 -> rotation first 
 2 -> shift first -->
  <parameter name="CorrectionMethod" type="int" value="1"/>
  <!--Enable or disable DEBUG mode -->
  <parameter name="DEBUG" type="bool" value="false"/>
  <!--Implement geometry shifts and rotations as described in alignmentCollectionName -->
  <parameter name="DoAlignCollection" type="bool" value="true"/>
  <!--Apply alignment steps in one go. Is supposed to be used for reversealignment in reverse order, like: undoAlignment, undoPreAlignment, undoGear -->
  <!--parameter name="DoAlignmentInOneGo" type="bool" value="false"/-->
  <!--Implement geometry shifts and rotations as described in GEAR steering file -->
  <!--parameter name="DoGear" type="bool" value="false"/-->
  <!--Rotation Angle around Z axis-->
  <!--parameter name="Gamma" type="double" value="0"/-->
  <!--Enable or disable histograms-->
  <parameter name="HistogramSwitch" type="bool" value="false"/>
  <!--This is the name of the modified output reference hit collection-->
  <!--parameter name="OutputReferenceCollection" type="string" value="output_refhit"/-->
  <!--Events number to have DEBUG1 printed outs (default=10)-->
  <parameter name="PrintEvents" type="int" value="0"/>
  <!--This is the name of the reference hit collection-->
  <!--parameter name="ReferenceCollection" type="string" value="referenceHit"/-->
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
  <!--List of alignment collections that were applied to the DUT-->
  <parameter name="alignmentCollectionNames" type="StringVec" value="prealign"/>
  <!--List of hit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="hitCollectionNames" type="StringVec" value="hitCollectionNames"/>
  <!--List of refhit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="refhitCollectionNames" type="StringVec" value="hitCollectionNames"/>
</processor>

 <processor name="AlignStraight" type="EUTelMille">
 <!--EUTelMille uses the MILLE program to write data files for MILLEPEDE II.-->
  <!--Hit collections name-->
  <parameter name="HitCollectionName" type="string" lcioInType="TrackerHit"> PreAlignedHit </parameter>
  <!--Track collection name. This is only relevant if InputMode is set to larger to 1-->
  <parameter name="TrackCollectionName" type="string" lcioInType="Track"> tracks </parameter>
  <!--Number of alignment constants used. Available mode are: 
1 - shifts in the X and Y directions and a rotation around the Z axis,
2 - only shifts in the X and Y directions
3 - (EXPERIMENTAL) shifts in the X,Y and Z directions and rotations around all three axis-->
  <parameter name="AlignMode" type="int" value="1"/>
  <!--This is the name of the alignment collection to be saved into the slcio file-->
  <!--parameter name="AlignmentConstantCollectionName" type="string" value="alignment"/-->
  <!--This is the name of the LCIO file name with the output alignmentconstants (add .slcio)-->
  <parameter name="AlignmentConstantLCIOFile" type="string" value="@DatabasePath@/@FilePrefix@-alignment.slcio"/>
  <!--Set how many hits (=planes) can be missing on a track candidate.-->
  <!--parameter name="AllowedMissingHits" type="int" value="0"/-->
  <!--Name of the Millepede binary file.-->
  <parameter name="BinaryFilename" type="string" value="@DatabasePath@/@FilePrefix@-align-mille.bin"/>
  <!--Maximal allowed distance between hits entering the fit per 10 cm space between the planes.-->
  <parameter name="DistanceMax" type="float" value="@DistanceMax@"/>
  <!--Maximal allowed distance between hits entering the fit per 10 cm space between the planes. One value for each neighbor planes. DistanceMax will be used for each pair if this vector is empty.-->
  <!--parameter name="DistanceMaxVec" type="FloatVec"> </parameter-->
  <!--Exclude planes from fit according to their sensor ids.-->
  <parameter name="ExcludePlanes" type="IntVec" value="@ExcludePlanes@"/>
  <!--Fixes the given alignment parameters in the fit if alignMode==3 is used. For each sensor an integer must be specified (If no value is given, then all parameters will be free). bit 0 = x shift, bit 1 = y shift, bit 2 = z shift, bit 3 = alpha, bit 4 = beta, bit 5 = gamma. Note: these numbers are ordered according to the z position of the sensors and NOT according to the sensor id.-->
  <parameter name="FixParameter" type="IntVec"> 28 28 28 28 28 28 </parameter>
  <!--Fix sensor planes in the fit according to their sensor ids.-->
  <parameter name="FixedPlanes" type="IntVec" value="@FixedPlanes@"/>
  <!--Generate a steering file for the pede program.-->
  <parameter name="GeneratePedeSteerfile" type="int" value="1"/>
  <!--This is the name of the hot pixel collection to be saved into the output slcio file-->
  <!--parameter name="HotPixelCollectionName" type="string" value=""/-->
  <!--Selects the source of input hits.
0 - hits read from hitfile and simple straight line trackfinding will be  performed internally. 
1 - hits read from output of tracking processor. 
2 - Test mode. Simple internal simulation and simple trackfinding. 
3 - Mixture of a track collection from the telescope and hit collections for the DUT (only one DUT layer can be used unfortunately)-->
  <parameter name="InputMode" type="int" value="0"/>
  <!--Maximal number of track candidates in a event.-->
  <parameter name="MaxTrackCandidates" type="int" value="200000"/>
  <!--Stop processor after this maximum number of track candidates (Total) is reached.-->
  <parameter name="MaxTrackCandidatesTotal" type="int" value="200000"/>
  <!--Remove Mimosa26 clusters with a charge (i.e. number of fired pixels in cluster) below or equal to this value-->
  <parameter name="MimosaClusterChargeMin" type="int" value="1"/>
  <!--Use only events with one hit in every plane.-->
  <parameter name="OnlySingleHitEvents" type="bool" value="0"/>
  <!--Use only events with one track candidate.-->
  <parameter name="OnlySingleTrackEvents" type="bool" value="0"/>
  <!--Name of the steering file for the pede program.-->
  <parameter name="PedeSteerfileName" type="string" value="@DatabasePath@/@FilePrefix@-pede-steer.txt"/>
  <!--FOR EXPERTS: List of commands that should be included in the pede steering file. Use '\' to seperate options and introduce a line break.-->
  <parameter name="PedeSteeringAdditionalCmds" type="StringVec"> chiscut 30.0 6.0 \\ outlierdownweighting 4 </parameter>
  <!--Start values for the alignment for the angle alpha.-->
  <!--parameter name="PedeUserStartValuesAlpha" type="FloatVec"> 0 0 0 0 0 0 </parameter-->
  <!--Start values for the alignment for the angle beta.-->
  <!--parameter name="PedeUserStartValuesBeta" type="FloatVec"> 0 0 0 0 0 0 </parameter-->
  <!--Start values for the alignment for the angle gamma.-->
  <!--parameter name="PedeUserStartValuesGamma" type="FloatVec"> 0 0 0 0 0 0 </parameter-->
  <!--Start values for the alignment for shifts in the X direction.-->
  <!--parameter name="PedeUserStartValuesX" type="FloatVec"> 0 0 0 0 0 0 </parameter-->
  <!--Start values for the alignment for shifts in the Y direction.-->
  <!--parameter name="PedeUserStartValuesY" type="FloatVec"> 0 0 0 0 0 0 </parameter-->
  <!--Start values for the alignment for shifts in the Z direction.-->
  <!--parameter name="PedeUserStartValuesZ" type="FloatVec"> 0 0 0 0 0 0 </parameter-->
  <!--reference hit collection name -->
  <!--parameter name="ReferenceCollection" type="string" value="referenceHit"/-->
  <!--Maximal values of the hit residuals in the X direction for a track. Note: these numbers are ordered according to the z position of the sensors and NOT according to the sensor id.-->
  <parameter name="ResidualsXMax" type="FloatVec" value="@ResidualXMax@"/>
  <!--Minimal values of the hit residuals in the X direction for a track. Note: these numbers are ordered according to the z position of the sensors and NOT according to the sensor id.-->
  <parameter name="ResidualsXMin" type="FloatVec" value="@ResidualXMin@"/>
  <!--Maximal values of the hit residuals in the Y direction for a track. Note: these numbers are ordered according to the z position of the sensors and NOT according to the sensor id.-->
  <parameter name="ResidualsYMax" type="FloatVec" value="@ResidualYMax@"/>
  <!--Minimal values of the hit residuals in the Y direction for a track. Note: these numbers are ordered according to the z position of the sensors and NOT according to the sensor id.-->
  <parameter name="ResidualsYMin" type="FloatVec" value="@ResidualYMin@"/>
  <!--X resolution parameter for each plane. Note: these numbers are ordered according to the z position of the sensors and NOT according to the sensor id.-->
  <parameter name="ResolutionX" type="FloatVec"> 18 18 18 18 18 18 </parameter>
  <!--Y resolution parameter for each plane. Note: these numbers are ordered according to the z position of the sensors and NOT according to the sensor id.-->
  <parameter name="ResolutionY" type="FloatVec"> 18 18 18 18 18 18 </parameter>
  <!--Z resolution parameter for each plane. Note: these numbers are ordered according to the z position of the sensors and NOT according to the sensor id.-->
  <parameter name="ResolutionZ" type="FloatVec"> 1000 1000 1000 1000 1000 1000 </parameter>
  <!--Execute the pede program using the generated steering file.-->
  <parameter name="RunPede" type="bool" value="@RunPede@"/>
  <!--(default) Resolution of the telescope for Millepede (sigma_x=sigma_y) used only if plane dependent resolution is set inconsistently.-->
  <parameter name="TelescopeResolution" type="float" value="10"/>
  <!--Rotation around the x axis of the sensors in test mode (to be determined by the alignment).-->
  <!--parameter name="TestModeSensorAlpha" type="FloatVec"> 0 0 0 0 0 0 </parameter-->
  <!--Rotation around the y axis of the sensors in test mode (to be determined by the alignment).-->
  <!--parameter name="TestModeSensorBeta" type="FloatVec"> 0 0 0 0 0 0 </parameter-->
  <!--Rotation around the z axis of the sensors in test mode (to be determined by the alignment).-->
  <!--parameter name="TestModeSensorGamma" type="FloatVec"> 0 0 0 0 0 0 </parameter-->
  <!--Resolution assumed for the sensors in test mode.-->
  <!--parameter name="TestModeSensorResolution" type="float" value="3"/-->
  <!--X shifts of the sensors in test mode (to be determined by the alignment).-->
  <!--parameter name="TestModeSensorXShifts" type="FloatVec"> 0 0 0 0 0 0 </parameter-->
  <!--Y shifts of the sensors in test mode (to be determined by the alignment).-->
  <!--parameter name="TestModeSensorYShifts" type="FloatVec"> 0 0 0 0 0 0 </parameter-->
  <!--Z positions of the sensors in test mode.-->
  <!--parameter name="TestModeSensorZPositions" type="FloatVec"> 20000 40000 60000 80000 100000 120000 </parameter-->
  <!--Width of the track slope distribution in the x direction-->
  <!--parameter name="TestModeXTrackSlope" type="float" value="0.0005"/-->
  <!--Width of the track slope distribution in the y direction-->
  <!--parameter name="TestModeYTrackSlope" type="float" value="0.0005"/-->
  <!--Give start values for pede by hand (0 - automatic calculation of start values, 1 - start values defined by user).-->
  <!--parameter name="UsePedeUserStartValues" type="int" value="0"/-->
  <!--Do you want the reference hit collection to be used for coordinate transformations?-->
  <!--parameter name="UseReferenceCollection" type="bool" value="true"/-->
  <!--Use cuts on the residuals to reduce the combinatorial background.-->
  <parameter name="UseResidualCuts" type="bool" value="@UseResidualCuts@"/>
  <!--Do not use all pixels for alignment, only these in the rectangular (A|B) e.g. (0,0) and (C|D) e.g. (100|100) of sensor S. Type in the way S1 A1 B1 C1 D1 S2 A2 B2 C2 D2 ...-->
  <!--parameter name="UseSensorRectangular" type="IntVec"> </parameter-->
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="MyEUTelUtilityPrintEventNumber" type="EUTelUtilityPrintEventNumber">
 <!--EUTelUtilityPrintEventNumber prints event number to screen depending on the verbosity level-->
  <!--Print event number for every n-th event-->
  <parameter name="EveryNEvents" type="int" value="1000"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
  <!--print the event timestamp as read from LCIO-->
  <!--parameter name="printTimestamp" type="bool" value="false"/-->
</processor>

</marlin>
