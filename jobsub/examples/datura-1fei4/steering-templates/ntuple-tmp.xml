<?xml version="1.0" encoding="us-ascii"?>
<!-- ?xml-stylesheet type="text/xsl" href="http://ilcsoft.desy.de/marlin/marlin.xsl"? -->
<!-- ?xml-stylesheet type="text/xsl" href="marlin.xsl"? -->

<!--
============================================================================================================================
   Steering File generated by Marlin GUI on Fri Aug  2 11:52:27 2013

   WARNING: - Please be aware that comments made in the original steering file were lost.
            - Processors that are not installed in your Marlin binary lost their parameter's descriptions and types as well.
            - Extra parameters that aren't categorized as default in a processor lost their description and type.
============================================================================================================================
-->


<marlin xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ilcsoft.desy.de/marlin/marlin.xsd">

   <execute>
      <processor name="AIDA"/>
      <processor name="LoadRefHitDB"/>
      <processor name="LoadPreAlignment"/>
      <processor name="ApplyPreAlignment"/>
      <processor name="LoadAlignment"/>
      <processor name="ApplyAlignment"/>
      <processor name="Fitter"/>
      <processor name="WriteTracksToNTuple"/>
      <processor name="MyEUTelUtilityPrintEventNumber"/>
   </execute>

   <global>
      <parameter name="LCIOInputFiles"> @LcioPath@/@FilePrefix@-hitmaker.slcio </parameter>
      <parameter name="GearXMLFile" value="@GearFilePath@/@GearFile@"/>
      <parameter name="MaxRecordNumber" value="@MaxRecordNumber@"/>
      <parameter name="SkipNEvents" value="@SkipNEvents@"/>
      <parameter name="SupressCheck" value="false"/>
      <parameter name="Verbosity" value="@Verbosity@"/>
   </global>

 <processor name="AIDA" type="AIDAProcessor">
 <!--Processor that handles AIDA files. Creates on directory per processor.  Processors only need to create and fill the histograms, clouds and tuples. Needs to be the first ActiveProcessor-->
  <!-- compression of output file 0: false >0: true (default) -->
  <parameter name="Compress" type="int" value="1"/>
  <!-- filename without extension-->
  <parameter name="FileName" type="string" value="@HistogramPath@/@FilePrefix@-track-ntuple"/>
  <!-- type of output file root (default) or xml )-->
  <parameter name="FileType" type="string" value="root"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="LoadRefHitDB" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:align:tel"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> refhit @DatabasePath@/@FilePrefix@-referencehit.slcio referenceHit </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="LoadPreAlignment" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:align:tel"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> prealign @DatabasePath@/@FilePrefix@-prealignment.slcio alignment </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="ApplyPreAlignment" type="EUTelApplyAlignmentProcessor">
 <!--Apply to the input hit the alignment corrections-->
  <!--Alignment constant from the condition file-->
  <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> prealign </parameter>
  <!--The name of the input hit collection-->
  <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> hit </parameter>
  <!--The name of the output hit collection-->
  <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> alignedPre </parameter>
  <!--Rotation Angle around X axis-->
  <!--parameter name="Alpha" type="double" value="0"/-->
  <!--Available directinos are:
 0 -> direct  
 1 -> reverse -->
  <parameter name="ApplyAlignmentDirection" type="int" value="0"/>
  <!--Do you want the reference hit collection to be corrected by the shifts and tilts from the alignment collection?-->
  <parameter name="ApplyToReferenceCollection" type="bool" value="1"/>
  <!--Rotation Angle around Y axis-->
  <!--parameter name="Beta" type="double" value="0"/-->
  <!--Available methods are:
 0 -> shift only 
 1 -> rotation first 
 2 -> shift first -->
  <parameter name="CorrectionMethod" type="int" value="1"/>
  <!--Enable or disable DEBUG mode -->
  <parameter name="DEBUG" type="bool" value="false"/>
  <!--Implement geometry shifts and rotations as described in alignmentCollectionName -->
  <parameter name="DoAlignCollection" type="bool" value="true"/>
  <!--Apply alignment steps in one go. Is supposed to be used for reversealignment in reverse order, like: undoAlignment, undoPreAlignment, undoGear -->
  <!--parameter name="DoAlignmentInOneGo" type="bool" value="false"/-->
  <!--Implement geometry shifts and rotations as described in GEAR steering file -->
  <!--parameter name="DoGear" type="bool" value="false"/-->
  <!--Rotation Angle around Z axis-->
  <!--parameter name="Gamma" type="double" value="0"/-->
  <!--Enable or disable histograms-->
  <parameter name="HistogramSwitch" type="bool" value="true"/>
  <!--This is the name of the modified output reference hit collection-->
  <!--parameter name="OutputReferenceCollection" type="string" value="output_refhit"/-->
  <!--Events number to have DEBUG1 printed outs (default=10)-->
  <parameter name="PrintEvents" type="int" value="0"/>
  <!--This is the name of the reference hit collection-->
  <parameter name="ReferenceCollection" type="string" value="refhit"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
  <!--List of alignment collections that were applied to the DUT-->
  <parameter name="alignmentCollectionNames" type="StringVec" value="prealign"/>
  <!--List of hit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="hitCollectionNames" type="StringVec" value="hitCollectionNames"/>
  <!--List of refhit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="refhitCollectionNames" type="StringVec" value="hitCollectionNames"/>
</processor>

 <processor name="LoadAlignment" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:calvin:hobbes"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> alignment @DatabasePath@/@FilePrefix@-alignment.slcio alignment </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="ApplyAlignment" type="EUTelApplyAlignmentProcessor">
 <!--Apply to the input hit the alignment corrections-->
  <!--Alignment constant from the condition file-->
  <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> alignment </parameter>
  <!--The name of the input hit collection-->
  <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> alignedPre </parameter>
  <!--The name of the output hit collection-->
  <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> alignedHit </parameter>
  <!--Rotation Angle around X axis-->
  <!--parameter name="Alpha" type="double" value="0"/-->
  <!--Available directinos are:
 0 -> direct  
 1 -> reverse -->
  <parameter name="ApplyAlignmentDirection" type="int" value="0"/>
  <!--Do you want the reference hit collection to be corrected by the shifts and tilts from the alignment collection?-->
  <parameter name="ApplyToReferenceCollection" type="bool" value="1"/>
  <!--Rotation Angle around Y axis-->
  <!--parameter name="Beta" type="double" value="0"/-->
  <!--Available methods are:
 0 -> shift only 
 1 -> rotation first 
 2 -> shift first -->
  <parameter name="CorrectionMethod" type="int" value="1"/>
  <!--Enable or disable DEBUG mode -->
  <parameter name="DEBUG" type="bool" value="false"/>
  <!--Implement geometry shifts and rotations as described in alignmentCollectionName -->
  <parameter name="DoAlignCollection" type="bool" value="true"/>
  <!--Apply alignment steps in one go. Is supposed to be used for reversealignment in reverse order, like: undoAlignment, undoPreAlignment, undoGear -->
  <!--parameter name="DoAlignmentInOneGo" type="bool" value="false"/-->
  <!--Implement geometry shifts and rotations as described in GEAR steering file -->
  <!--parameter name="DoGear" type="bool" value="false"/-->
  <!--Rotation Angle around Z axis-->
  <!--parameter name="Gamma" type="double" value="0"/-->
  <!--Enable or disable histograms-->
  <parameter name="HistogramSwitch" type="bool" value="false"/>
  <!--This is the name of the modified output reference hit collection-->
  <!--parameter name="OutputReferenceCollection" type="string" value="output_refhit"/-->
  <!--Events number to have DEBUG1 printed outs (default=10)-->
  <parameter name="PrintEvents" type="int" value="0"/>
  <!--This is the name of the reference hit collection-->
  <parameter name="ReferenceCollection" type="string" value="refhit"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
  <!--List of alignment collections that were applied to the DUT-->
  <parameter name="alignmentCollectionNames" type="StringVec" value="alignment"/>
  <!--List of hit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="hitCollectionNames" type="StringVec" value="hitCollectionNames"/>
  <!--List of refhit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="refhitCollectionNames" type="StringVec" value="hitCollectionNames"/>
</processor>


<processor name="Fitter" type="EUTelTestFitter">
  <!--Analytical track fitting processor for EUDET telescope-->
  <!--Name of the input TrackerHit collection-->
  <parameter name="InputCollectionName" type="string" lcioInType="TrackerHit"> alignedHit </parameter>
  <!--Ids of layers for which alignment corrections are given-->
  <!--parameter name="AlignLayerIDs" type="IntVec"> </parameter-->
  <!--Rotation around Z for layer alignment-->
  <!--parameter name="AlignLayerRotZ" type="FloatVec"> </parameter-->
  <!--Alignment corrections in X for these layers-->
  <!--parameter name="AlignLayerShiftX" type="FloatVec"> </parameter-->
  <!--Alignment corrections in Y for these layers-->
  <!--parameter name="AlignLayerShiftY" type="FloatVec"> </parameter-->
  <!--Allow same hit to be used in more than one track-->
  <parameter name="AllowAmbiguousHits" type="bool" value="false"/>
  <!--Allowed number of missing hits in the track-->
  <parameter name="AllowMissingHits" type="int" value="@AllowedMissingHits@"/>
  <!--Allowed number of hits removed from the track-->
  <parameter name="AllowSkipHits" type="int" value="@AllowedSkipHits@"/>
  <!--Beam direction tilt in X-Z plane [rad] (for beam constraint)-->
  <!--parameter name="BeamSlopeX" type="double" value="0"/-->
  <!--Beam direction tilt in Y-Z plane [rad] (for beam constraint)-->
  <!--parameter name="BeamSlopeY" type="double" value="0"/-->
  <!--Assumed angular spread of the beam [rad] (for beam constraint)-->
  <!--parameter name="BeamSpread" type="double" value="0"/-->
  <!--Maximum Chi2 for accepted track fit-->
  <parameter name="Chi2Max" type="double" value="@Chi2Max@"/>
  <!--Minimum Chi2 for accepted track fit-->
  <parameter name="Chi2Min" type="double" value="0"/>
  <!--Beam energy [GeV]-->
  <parameter name="Ebeam" type="double" value="@BeamEnergy@"/>
  <!--Name of the histogram information file-->
  <parameter name="HistoInfoFileName" type="string" value="@HistoInfoFile@"/>
  <!--Flag for storing input (measured) hits in track-->
  <parameter name="InputHitsInTrack" type="bool" value="true"/>
  <!--Ids of layers for which position masks are applied-->
  <!--parameter name="MaskLayerIDs" type="IntVec"> </parameter-->
  <!--Upper mask edge in X-->
  <!--parameter name="MaskMaxX" type="FloatVec"> </parameter-->
  <!--Upper mask edge in Y-->
  <!--parameter name="MaskMaxY" type="FloatVec"> </parameter-->
  <!--Lower mask edge in X-->
  <!--parameter name="MaskMinX" type="FloatVec"> </parameter-->
  <!--Lower mask edge in Y-->
  <!--parameter name="MaskMinY" type="FloatVec"> </parameter-->
  <!--Maximum number of considered hits per plane-->
  <parameter name="MaxPlaneHits" type="int" value="100"/>
  <!--Maximum number of hits to be shared by more than one track-->
  <!--parameter name="MaximumAmbiguousHits" type="int" value="2"/-->
  <!--Chi2 penalty for missing hit in the track-->
  <parameter name="MissingHitPenalty" type="double" value="@MissingHitPenalty@"/>
  <!--Flag for storing output (fitted) hits in track-->
  <parameter name="OutputHitsInTrack" type="bool" value="true"/>
  <!--reference hit collection name -->
  <parameter name="ReferenceCollection" type="string" value="refhit"/>
  <!--X resolution parameter for each plane. Note: these numbers are ordered according to the z position of the sensors and NOT according to the sensor id.-->
  <!--parameter name="ResolutionX" type="FloatVec"> 10 10 10 10 10 10 </parameter-->
  <!--Y resolution parameter for each plane. Note: these numbers are ordered according to the z position of the sensors and NOT according to the sensor id.-->
  <!--parameter name="ResolutionY" type="FloatVec"> 10 10 10 10 10 10 </parameter-->
  <!--Z resolution parameter for each plane. Note: these numbers are ordered according to the z position of the sensors and NOT according to the sensor id.-->
  <!--parameter name="ResolutionZ" type="FloatVec"> 10 10 10 10 10 10 </parameter-->
  <!--Flag for searching multiple tracks in events with multiple hits-->
  <parameter name="SearchMultipleTracks" type="bool" value="true"/>
  <!--Chi2 penalty for removing hit from the track-->
  <parameter name="SkipHitPenalty" type="double" value="@SkipHitPenalty@"/>
  <!--Ids of layers which should NOT be included in the fit-->
  <parameter name="SkipLayerIDs" type="IntVec" value="99"/>
  <!--Maximum hit distance from the expected position, used for hit preselection in [mm]-->
  <parameter name="SlopeDistanceMax" type="float" value="@SlopeDistanceMax@"/>
  <!--Limit on track slope change when passing sensor layer (in X direction)-->
  <parameter name="SlopeXLimit" type="float" value="0.01"/>
  <!--Limit on track slope change when passing sensor layer (in Y direction)-->
  <parameter name="SlopeYLimit" type="float" value="0.01"/>
  <!--Flag for using beam direction constraint in the fit-->
  <parameter name="UseBeamConstraint" type="bool" value="false"/>
  <!--Flag for including DUT measurement in the fit-->
  <parameter name="UseDUT" type="bool" value="false"/>
  <!--Flag for using nominal resolution instead of position errors-->
  <parameter name="UseNominalResolution" type="bool" value="false"/>
  <!--Do you want the reference hit collection to be used for coordinate transformations?-->
  <!--parameter name="UseReferenceCollection" type="bool" value="true"/-->
  <!--Use expected track direction to constraint number of considered hit combinations (track preselection).-->
  <parameter name="UseSlope" type="bool" value="true"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
  <!--Ids of layers for which position window cut are applied-->
  <!--parameter name="WindowLayerIDs" type="IntVec"> </parameter-->
  <!--Upper window edge in X-->
  <!--parameter name="WindowMaxX" type="FloatVec"> </parameter-->
  <!--Upper window edge in Y-->
  <!--parameter name="WindowMaxY" type="FloatVec"> </parameter-->
  <!--Lower window edge in X-->
  <!--parameter name="WindowMinX" type="FloatVec"> </parameter-->
  <!--Lower window edge in Y-->
  <!--parameter name="WindowMinY" type="FloatVec"> </parameter-->
  <!--List of alignment collections which are neede to get track position on a Sensor surface -->
  <parameter name="alignmentCollectionNames" type="StringVec" value="alignment"/>
  <parameter name="CorrectedHitCollectionName" type="string" lcioOutType="TrackerHit"> corrhits </parameter>
  <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> fithits </parameter>
  <parameter name="OutputTrackCollectionName" type="string" lcioOutType="Track"> track </parameter>
  <parameter name="PassiveLayerIDs" type="IntVec"></parameter>
</processor>



 <processor name="MyEUTelUtilityPrintEventNumber" type="EUTelUtilityPrintEventNumber">
 <!--EUTelUtilityPrintEventNumber prints event number to screen depending on the verbosity level-->
  <!--Print event number for every n-th event-->
  <parameter name="EveryNEvents" type="int" value="1000"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
  <!--print the event timestamp as read from LCIO-->
  <!--parameter name="printTimestamp" type="bool" value="false"/-->
</processor>



 <processor name="WriteTracksToNTuple" type="EUTelFitTuple">
 <!--Prepare n-tuple with track fit results-->
  <!--Alignment corrections for DUT: shift in X, Y and rotation around Z-->
  <parameter name="DUTalignment" type="FloatVec"> </parameter>
  <!--Maximum allowed distance between fit and matched DUT hit-->
  <parameter name="DistMax" type="double">0.1 </parameter>
  <!--Name of the input Track collection-->
  <parameter name="InputCollectionName" type="string" lcioInType="Track">track </parameter>
  <!--Name of the input DUT hit collection-->
  <parameter name="InputDUTCollectionName" type="string" lcioInType="TrackerHit"> </parameter>
  <!--Id of telescope layer which should be used as DUT-->
  <parameter name="ManualDUTid" type="int">0 </parameter>
  <!--Value used for missing measurements-->
  <parameter name="MissingValue" type="double">-100 </parameter>
  <!--Flag for manual DUT selection-->
  <parameter name="UseManualDUT" type="bool">false </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string">DEBUG </parameter-->
</processor>

</marlin>
