<?xml version="1.0" encoding="us-ascii"?>
<!-- ?xml-stylesheet type="text/xsl" href="http://ilcsoft.desy.de/marlin/marlin.xsl"? -->
<!-- ?xml-stylesheet type="text/xsl" href="marlin.xsl"? -->

<!--
============================================================================================================================
   Steering File generated by Marlin GUI on Mon Jun 24 17:02:36 2013

   WARNING: - Please be aware that comments made in the original steering file were lost.
            - Processors that are not installed in your Marlin binary lost their parameter's descriptions and types as well.
            - Extra parameters that aren't categorized as default in a processor lost their description and type.
============================================================================================================================
-->


<marlin xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ilcsoft.desy.de/marlin/marlin.xsd">

   <execute>
      <processor name="AIDA"/>
      <!--processor name="LoadAlignmentPALPIDEfs"/-->
      <processor name="LoadAlignment"/>
      <processor name="LoadPreAlignment"/>
      <processor name="LoadDeadColumnDBPALPIDEfs"/>
      <processor name="LoadHotPixelDBPALPIDEfs"/>
      <processor name="Analysis"/>
      <!--processor name="Save"/-->
      <processor name="MyEUTelUtilityPrintEventNumber"/>
   </execute>

   <global>
      <parameter name="LCIOInputFiles"> @LcioPath@/@FilePrefix@-track_DUT@dutID@.slcio </parameter>
      <parameter name="GearXMLFile" value="@GearFilePath@/@GearFile@"/>
      <parameter name="MaxRecordNumber" value="@MaxRecordNumber@"/>
      <parameter name="SkipNEvents" value="@SkipNEvents@"/>
      <parameter name="SupressCheck" value="false"/>
      <parameter name="Verbosity" value="@Verbosity@"/>
   </global>

 <processor name="AIDA" type="AIDAProcessor">
 <!--Processor that handles AIDA files. Creates on directory per processor.  Processors only need to create and fill the histograms, clouds and tuples. Needs to be the first ActiveProcessor-->
  <!-- compression of output file 0: false >0: true (default) -->
  <parameter name="Compress" type="int" value="1"/>
  <!-- filename without extension-->
  <parameter name="FileName" type="string" value="@HistogramPath@/@FilePrefix@-analysis_DUT@dutID@"/>
  <!-- type of output file root (default) or xml )-->
  <parameter name="FileType" type="string" value="root"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="LoadAlignmentPALPIDEfs" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:calvin:hobbes"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <!--parameter name="SimpleFileHandler" type="StringVec"> alignment @DatabasePath@/run23-28-alignment.slcio alignment </parameter-->
  <parameter name="SimpleFileHandler" type="StringVec"> alignmentPALPIDEfs @DatabasePath@/@FilePrefix@-alignment_PALPIDEfs.slcio alignment </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="LoadAlignment" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:calvin:hobbes"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <!--parameter name="SimpleFileHandler" type="StringVec"> alignment @DatabasePath@/run23-28-alignment.slcio alignment </parameter-->
  <parameter name="SimpleFileHandler" type="StringVec"> alignment @DatabasePath@/@FilePrefix@-alignment.slcio alignment </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="LoadPreAlignment" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:align:tel"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <!--parameter name="SimpleFileHandler" type="StringVec"> prealign @DatabasePath@/run23-28-prealignment.slcio alignment </parameter-->
  <parameter name="SimpleFileHandler" type="StringVec"> prealign @DatabasePath@/@FilePrefix@-prealignment.slcio alignment </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="LoadDeadColumnDBPALPIDEfs" type="ConditionsProcessor">
   <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName</parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:calvin:hobbes"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> deadColumn @DatabasePath@/run@RunNumber@-deadColumn.slcio deadColumn </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="LoadHotPixelDBPALPIDEfs" type="ConditionsProcessor">
   <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName</parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:calvin:hobbes"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> hotpixel_pALPIDEfs @DatabasePath@/run@RunNumber@-hotpixelPALPIDEfs.slcio hotpixel_pALPIDEfs </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

<processor name="Analysis" type="EUTelProcessorAnalysisPALPIDEfs">
  <!--This is the name of the input collection for the fitted hits-->
  <parameter name="InputFittedHitName" type="StringVec"> fithits </parameter>
  <!--This is the name of the input collection of the hits-->
  <parameter name="InputCollectionName" type="StringVec"> hit </parameter>
  <!--This is the name of the input track collection-->
  <parameter name="TrackCollectionName" type="string"> track </parameter>
  <!--Alignment constant from the condition file-->
  <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> alignment </parameter>
  <!--Alignment constant from the condition file-->
  <parameter name="AlignmentPAlpideConstantName" type="string" lcioInType="LCGenericObject"> alignmentPALPIDEfs </parameter>
  <!--PreAlignment constant from the condition file-->
  <parameter name="PreAlignmentConstantName" type="string" lcioInType="LCGenericObject"> prealign </parameter>
  <!--Input of Zero Suppressed data-->
  <parameter name="ZSDataCollectionName" type="string" lcioInType="TrackerData"> original_zsdata </parameter>
    <!--Switch on or off the histogram filling-->
  <parameter name="HistogramFilling" type="bool" value="true"/>
  <!--This is the name of the histogram information file-->
  <parameter name="HistoInfoFileName" type="string" value="@HistoInfoFile@"/>
  <!--This is the maximum distance between the fit and the hit to associate the hit with the track-->
  <parameter name="Limit" type="double" value="0.1"/>
  <!--This is the ID of the DUT-->
  <parameter name="dutID" type="int" value="@dutID@"/>
  <!--This is the maximum number of pixels in one cluster for the clustershape analysis-->
  <parameter name="MaxNumberOfPixels" type="int" value="3"/>
  <!--This is the maximum number of planes that can have more than one hit-->
  <parameter name="nPlanesWithMoreHits" type="int" value="3"/>
  <!--More tracks are allowed in one event-->
  <parameter name="MoreTracks" type="bool" value="false"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value="MESSAGE2"/-->
    <!--This is the name of the hotpixel collection-->
  <parameter name="HotPixelCollectionName" type="string" value="hotpixel_pALPIDEfs"/>
  <!--This is the name of the file which contains the pixels which were masked during datataking"-->
  <parameter name="NoiseMaskFileName" type="string" value="@DatabasePath@/@FilePrefix@-maskedPixels_@dutID@.txt" />
  <!--Particle energy-->
  <parameter name="Energy" type="double" value="@BeamEnergy@"/>
  <!--Chip IDs-->
  <parameter name="ChipID" type="stringVec" value="@ChipIDs@"/>
  <!--Irradiation level-->
  <parameter name="Irradiation" type="stringVec" value="@IrradiationLevel@"/>
  <!--Data taking rate-->
  <parameter name="Rate" type="string" value="@Rate@"/>
  <!--Folder name where all the settings of each run will be saved (settings_DUTid.txt)-->
  <parameter name="OutputSettingsFolderName" type="string" value="@LcioPath@/../"/>
  <!--This is minimum timestamp required to consider an event-->
  <parameter name="MinTimeStamp" type="double" value="@MinTimeStamp@"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value="MESSAGE1"/-->
</processor>

<processor name="Save" type="EUTelOutputProcessor">
 <!--Writes the current event to the specified LCIO outputfile. Eventually it adds a EORE at the of the file if it was missing Needs to be the last ActiveProcessor.-->
  <!--drops the named collections from the event-->
  <parameter name="DropCollectionNames" type="StringVec">  </parameter>
    <!--drops all collections of the given type from the event-->
  <!--parameter name="DropCollectionTypes" type="StringVec"> SimTrackerHit SimCalorimeterHit </parameter-->
  <!-- write complete objects in subset collections to the file (i.e. ignore subset flag)-->
  <!--parameter name="FullSubsetCollections" type="StringVec" value="MCParticlesSkimmed"/-->
  <!--force keep of the named collections - overrules DropCollectionTypes (and DropCollectionNames)-->
  <!--parameter name="KeepCollectionNames" type="StringVec"> track fithits </parameter-->
  <!-- name of output file -->
  <parameter name="LCIOOutputFile" type="string" value="@LcioPath@/@FilePrefix@-analysis_DUT@dutID@.slcio"/>
    <!--write mode for output file:  WRITE_APPEND or WRITE_NEW-->
  <parameter name="LCIOWriteMode" type="string" value="WRITE_NEW"/>
    <!--Set it to true to remove intermediate EORE in merged runs-->
  <parameter name="SkipIntermediateEORE" type="bool" value="true"/>
    <!--will split output file if size in kB exceeds given value - doesn't work with APPEND and NEW-->
  <!--parameter name="SplitFileSizekB" type="int" value="1992294"/-->
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

<processor name="MyEUTelUtilityPrintEventNumber" type="EUTelUtilityPrintEventNumber">
  <!--EUTelUtilityPrintEventNumber prints event number to screen depending on the verbosity level-->
  <!--Print event number for every n-th event-->
  <parameter name="EveryNEvents" type="int" value="10000"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
  <!--print the event timestamp as read from LCIO-->
  <!--parameter name="printTimestamp" type="bool" value="false"/-->
</processor>

</marlin>
