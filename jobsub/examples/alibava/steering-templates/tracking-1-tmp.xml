<?xml version="1.0" encoding="us-ascii"?>
<!-- ?xml-stylesheet type="text/xsl" href="http://ilcsoft.desy.de/marlin/marlin.xsl"? -->
<!-- ?xml-stylesheet type="text/xsl" href="marlin.xsl"? -->

<!--
============================================================================================================================
   Steering File generated by Marlin GUI on Wed Jan 31 17:30:24 2018

   WARNING: - Please be aware that comments made in the original steering file were lost.
            - Processors that are not installed in your Marlin binary lost their parameter's descriptions and types as well.
            - Extra parameters that aren't categorized as default in a processor lost their description and type.
============================================================================================================================
-->


<marlin xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ilcsoft.desy.de/marlin/marlin.xsd">

   <execute>
      <processor name="AIDA"/>
      <processor name="LoadRefHitDB"/>
      <processor name="LoadAlignment1"/>
      <processor name="ApplyAlignment1"/>
      <processor name="LoadAlignment2"/>
      <processor name="ApplyAlignment2"/>
      <processor name="LoadAlignment3"/>
      <processor name="ApplyAlignment3"/>
      <processor name="LoadAlignment4"/>
      <processor name="ApplyAlignment4"/>
      <processor name="LoadAlignment5"/>
      <processor name="ApplyAlignment5"/>
      <processor name="DafFitter"/>
      <processor name="Ntuple"/>
      <processor name="Save"/>
   </execute>

   <global>
      <parameter name="LCIOInputFiles"> @LcioPath@/@FilePrefix@-coordinator.slcio </parameter>
      <parameter name="GearXMLFile" value="@GearFilePath@/@GearFile@"/>
      <parameter name="MaxRecordNumber" value="@MaxRecordNumber@"/>
      <parameter name="SkipNEvents" value="@SkipNEvents@"/>
      <parameter name="SupressCheck" value="false"/>
      <parameter name="Verbosity" value="@Verbosity@"/>
   </global>

 <processor name="AIDA" type="AIDAProcessor">
 <!--Processor that handles AIDA files. Creates on directory per processor.  Processors only need to create and fill the histograms, clouds and tuples. Needs to be the first ActiveProcessor-->
  <!-- compression of output file 0: false >0: true (default) -->
  <parameter name="Compress" type="int" value="1"/>
  <!-- filename without extension-->
  <parameter name="FileName" type="string" value="@HistogramPath@/@Output@-alibava-tracking-1"/>
  <!-- type of output file root (default) or xml )-->
  <parameter name="FileType" type="string" value="root"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="LoadRefHitDB" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:align:tel"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> referenceHit @DatabasePath@/@FilePrefix@-referencehit.slcio referenceHit </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="LoadAlignment1" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:align:tel"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> alignment1 @DatabasePath@/@FilePrefix@-alignment-1.slcio alignment </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="ApplyAlignment1" type="EUTelApplyAlignmentProcessor">
 <!--Apply to the input hit the alignment corrections-->
  <!--Alignment constant from the condition file-->
  <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> alignment1 </parameter>
  <!--The name of the input hit collection-->
  <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> PreAlignedHit2 </parameter>
  <!--The name of the output hit collection-->
  <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> AlignedHit1 </parameter>
  <!--Rotation Angle around X axis-->
  <!--parameter name="Alpha" type="double" value="0"/-->
  <!--Available directions are:
 0 -> direct  
 1 -> reverse -->
  <parameter name="ApplyAlignmentDirection" type="int" value="0"/>
  <!--Do you want the reference hit collection to be corrected by the shifts and tilts from the alignment collection?-->
  <parameter name="ApplyToReferenceCollection" type="bool" value="1"/>
  <!--Rotation Angle around Y axis-->
  <!--parameter name="Beta" type="double" value="0"/-->
  <!--Available methods are:
 0 -> shift only 
 1 -> rotation first 
 2 -> shift first -->
  <parameter name="CorrectionMethod" type="int" value="1"/>
  <!--Enable or disable DEBUG mode -->
  <parameter name="DEBUG" type="bool" value="false"/>
  <!--Implement geometry shifts and rotations as described in alignmentCollectionName -->
  <parameter name="DoAlignCollection" type="bool" value="true"/>
  <!--Apply alignment steps in one go. Is supposed to be used for reversealignment in reverse order, like: undoAlignment, undoPreAlignment, undoGear -->
  <!--parameter name="DoAlignmentInOneGo" type="bool" value="false"/-->
  <!--Implement geometry shifts and rotations as described in GEAR steering file -->
  <!--parameter name="DoGear" type="bool" value="false"/-->
  <!--Rotation Angle around Z axis-->
  <!--parameter name="Gamma" type="double" value="0"/-->
  <!--Enable or disable histograms-->
  <parameter name="HistogramSwitch" type="bool" value="false"/>
  <!--This is the name of the modified output reference hit collection-->
  <!--parameter name="OutputReferenceCollection" type="string" value="output_refhit"/-->
  <!--Events number to have DEBUG1 printed outs (default=10)-->
  <parameter name="PrintEvents" type="int" value="10"/>
  <!--This is the name of the reference hit collection-->
  <!--parameter name="ReferenceCollection" type="string" value="referenceHit"/-->
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
  <!--List of alignment collections that were applied to the DUT-->
  <parameter name="alignmentCollectionNames" type="StringVec" value="alignment1"/>
  <!--List of hit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="hitCollectionNames" type="StringVec" value="hitCollectionNames"/>
  <!--List of refhit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="refhitCollectionNames" type="StringVec" value="hitCollectionNames"/>
</processor>

 <processor name="LoadAlignment2" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:align:tel"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> alignment2 @DatabasePath@/@FilePrefix@-alignment-2.slcio alignment </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="ApplyAlignment2" type="EUTelApplyAlignmentProcessor">
 <!--Apply to the input hit the alignment corrections-->
  <!--Alignment constant from the condition file-->
  <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> alignment2 </parameter>
  <!--The name of the input hit collection-->
  <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> AlignedHit1 </parameter>
  <!--The name of the output hit collection-->
  <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> AlignedHit2 </parameter>
  <!--Rotation Angle around X axis-->
  <!--parameter name="Alpha" type="double" value="0"/-->
  <!--Available directions are:
 0 -> direct  
 1 -> reverse -->
  <parameter name="ApplyAlignmentDirection" type="int" value="0"/>
  <!--Do you want the reference hit collection to be corrected by the shifts and tilts from the alignment collection?-->
  <parameter name="ApplyToReferenceCollection" type="bool" value="1"/>
  <!--Rotation Angle around Y axis-->
  <!--parameter name="Beta" type="double" value="0"/-->
  <!--Available methods are:
 0 -> shift only 
 1 -> rotation first 
 2 -> shift first -->
  <parameter name="CorrectionMethod" type="int" value="1"/>
  <!--Enable or disable DEBUG mode -->
  <parameter name="DEBUG" type="bool" value="false"/>
  <!--Implement geometry shifts and rotations as described in alignmentCollectionName -->
  <parameter name="DoAlignCollection" type="bool" value="true"/>
  <!--Apply alignment steps in one go. Is supposed to be used for reversealignment in reverse order, like: undoAlignment, undoPreAlignment, undoGear -->
  <!--parameter name="DoAlignmentInOneGo" type="bool" value="false"/-->
  <!--Implement geometry shifts and rotations as described in GEAR steering file -->
  <!--parameter name="DoGear" type="bool" value="false"/-->
  <!--Rotation Angle around Z axis-->
  <!--parameter name="Gamma" type="double" value="0"/-->
  <!--Enable or disable histograms-->
  <parameter name="HistogramSwitch" type="bool" value="false"/>
  <!--This is the name of the modified output reference hit collection-->
  <!--parameter name="OutputReferenceCollection" type="string" value="output_refhit"/-->
  <!--Events number to have DEBUG1 printed outs (default=10)-->
  <parameter name="PrintEvents" type="int" value="10"/>
  <!--This is the name of the reference hit collection-->
  <!--parameter name="ReferenceCollection" type="string" value="referenceHit"/-->
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
  <!--List of alignment collections that were applied to the DUT-->
  <parameter name="alignmentCollectionNames" type="StringVec" value="alignment2"/>
  <!--List of hit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="hitCollectionNames" type="StringVec" value="hitCollectionNames"/>
  <!--List of refhit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="refhitCollectionNames" type="StringVec" value="hitCollectionNames"/>
</processor>

 <processor name="LoadAlignment3" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:align:tel"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> alignment3 @DatabasePath@/@FilePrefix@-alignment-3.slcio alignment </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="ApplyAlignment3" type="EUTelApplyAlignmentProcessor">
 <!--Apply to the input hit the alignment corrections-->
  <!--Alignment constant from the condition file-->
  <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> alignment3 </parameter>
  <!--The name of the input hit collection-->
  <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> AlignedHit2 </parameter>
  <!--The name of the output hit collection-->
  <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> AlignedHit3 </parameter>
  <!--Rotation Angle around X axis-->
  <!--parameter name="Alpha" type="double" value="0"/-->
  <!--Available directions are:
 0 -> direct  
 1 -> reverse -->
  <parameter name="ApplyAlignmentDirection" type="int" value="0"/>
  <!--Do you want the reference hit collection to be corrected by the shifts and tilts from the alignment collection?-->
  <parameter name="ApplyToReferenceCollection" type="bool" value="1"/>
  <!--Rotation Angle around Y axis-->
  <!--parameter name="Beta" type="double" value="0"/-->
  <!--Available methods are:
 0 -> shift only 
 1 -> rotation first 
 2 -> shift first -->
  <parameter name="CorrectionMethod" type="int" value="1"/>
  <!--Enable or disable DEBUG mode -->
  <parameter name="DEBUG" type="bool" value="false"/>
  <!--Implement geometry shifts and rotations as described in alignmentCollectionName -->
  <parameter name="DoAlignCollection" type="bool" value="true"/>
  <!--Apply alignment steps in one go. Is supposed to be used for reversealignment in reverse order, like: undoAlignment, undoPreAlignment, undoGear -->
  <!--parameter name="DoAlignmentInOneGo" type="bool" value="false"/-->
  <!--Implement geometry shifts and rotations as described in GEAR steering file -->
  <!--parameter name="DoGear" type="bool" value="false"/-->
  <!--Rotation Angle around Z axis-->
  <!--parameter name="Gamma" type="double" value="0"/-->
  <!--Enable or disable histograms-->
  <parameter name="HistogramSwitch" type="bool" value="false"/>
  <!--This is the name of the modified output reference hit collection-->
  <!--parameter name="OutputReferenceCollection" type="string" value="output_refhit"/-->
  <!--Events number to have DEBUG1 printed outs (default=10)-->
  <parameter name="PrintEvents" type="int" value="10"/>
  <!--This is the name of the reference hit collection-->
  <!--parameter name="ReferenceCollection" type="string" value="referenceHit"/-->
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
  <!--List of alignment collections that were applied to the DUT-->
  <parameter name="alignmentCollectionNames" type="StringVec" value="alignment3"/>
  <!--List of hit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="hitCollectionNames" type="StringVec" value="hitCollectionNames"/>
  <!--List of refhit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="refhitCollectionNames" type="StringVec" value="hitCollectionNames"/>
</processor>

 <processor name="LoadAlignment4" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:align:tel"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> alignment4 @DatabasePath@/@FilePrefix@-alignment-4.slcio alignment </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="ApplyAlignment4" type="EUTelApplyAlignmentProcessor">
 <!--Apply to the input hit the alignment corrections-->
  <!--Alignment constant from the condition file-->
  <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> alignment4 </parameter>
  <!--The name of the input hit collection-->
  <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> AlignedHit3 </parameter>
  <!--The name of the output hit collection-->
  <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> AlignedHit4 </parameter>
  <!--Rotation Angle around X axis-->
  <!--parameter name="Alpha" type="double" value="0"/-->
  <!--Available directions are:
 0 -> direct  
 1 -> reverse -->
  <parameter name="ApplyAlignmentDirection" type="int" value="0"/>
  <!--Do you want the reference hit collection to be corrected by the shifts and tilts from the alignment collection?-->
  <parameter name="ApplyToReferenceCollection" type="bool" value="1"/>
  <!--Rotation Angle around Y axis-->
  <!--parameter name="Beta" type="double" value="0"/-->
  <!--Available methods are:
 0 -> shift only 
 1 -> rotation first 
 2 -> shift first -->
  <parameter name="CorrectionMethod" type="int" value="1"/>
  <!--Enable or disable DEBUG mode -->
  <parameter name="DEBUG" type="bool" value="false"/>
  <!--Implement geometry shifts and rotations as described in alignmentCollectionName -->
  <parameter name="DoAlignCollection" type="bool" value="true"/>
  <!--Apply alignment steps in one go. Is supposed to be used for reversealignment in reverse order, like: undoAlignment, undoPreAlignment, undoGear -->
  <!--parameter name="DoAlignmentInOneGo" type="bool" value="false"/-->
  <!--Implement geometry shifts and rotations as described in GEAR steering file -->
  <!--parameter name="DoGear" type="bool" value="false"/-->
  <!--Rotation Angle around Z axis-->
  <!--parameter name="Gamma" type="double" value="0"/-->
  <!--Enable or disable histograms-->
  <parameter name="HistogramSwitch" type="bool" value="false"/>
  <!--This is the name of the modified output reference hit collection-->
  <!--parameter name="OutputReferenceCollection" type="string" value="output_refhit"/-->
  <!--Events number to have DEBUG1 printed outs (default=10)-->
  <parameter name="PrintEvents" type="int" value="10"/>
  <!--This is the name of the reference hit collection-->
  <!--parameter name="ReferenceCollection" type="string" value="referenceHit"/-->
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
  <!--List of alignment collections that were applied to the DUT-->
  <parameter name="alignmentCollectionNames" type="StringVec" value="alignment4"/>
  <!--List of hit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="hitCollectionNames" type="StringVec" value="hitCollectionNames"/>
  <!--List of refhit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="refhitCollectionNames" type="StringVec" value="hitCollectionNames"/>
</processor>

 <processor name="LoadAlignment5" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:align:tel"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> alignment5 @DatabasePath@/@FilePrefix@-alignment-5.slcio alignment </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="ApplyAlignment5" type="EUTelApplyAlignmentProcessor">
 <!--Apply to the input hit the alignment corrections-->
  <!--Alignment constant from the condition file-->
  <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> alignment5 </parameter>
  <!--The name of the input hit collection-->
  <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> AlignedHit4 </parameter>
  <!--The name of the output hit collection-->
  <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> AlignedHit5 </parameter>
  <!--Rotation Angle around X axis-->
  <!--parameter name="Alpha" type="double" value="0"/-->
  <!--Available directions are:
 0 -> direct  
 1 -> reverse -->
  <parameter name="ApplyAlignmentDirection" type="int" value="0"/>
  <!--Do you want the reference hit collection to be corrected by the shifts and tilts from the alignment collection?-->
  <parameter name="ApplyToReferenceCollection" type="bool" value="1"/>
  <!--Rotation Angle around Y axis-->
  <!--parameter name="Beta" type="double" value="0"/-->
  <!--Available methods are:
 0 -> shift only 
 1 -> rotation first 
 2 -> shift first -->
  <parameter name="CorrectionMethod" type="int" value="1"/>
  <!--Enable or disable DEBUG mode -->
  <parameter name="DEBUG" type="bool" value="false"/>
  <!--Implement geometry shifts and rotations as described in alignmentCollectionName -->
  <parameter name="DoAlignCollection" type="bool" value="true"/>
  <!--Apply alignment steps in one go. Is supposed to be used for reversealignment in reverse order, like: undoAlignment, undoPreAlignment, undoGear -->
  <!--parameter name="DoAlignmentInOneGo" type="bool" value="false"/-->
  <!--Implement geometry shifts and rotations as described in GEAR steering file -->
  <!--parameter name="DoGear" type="bool" value="false"/-->
  <!--Rotation Angle around Z axis-->
  <!--parameter name="Gamma" type="double" value="0"/-->
  <!--Enable or disable histograms-->
  <parameter name="HistogramSwitch" type="bool" value="false"/>
  <!--This is the name of the modified output reference hit collection-->
  <!--parameter name="OutputReferenceCollection" type="string" value="output_refhit"/-->
  <!--Events number to have DEBUG1 printed outs (default=10)-->
  <parameter name="PrintEvents" type="int" value="10"/>
  <!--This is the name of the reference hit collection-->
  <!--parameter name="ReferenceCollection" type="string" value="referenceHit"/-->
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
  <!--List of alignment collections that were applied to the DUT-->
  <parameter name="alignmentCollectionNames" type="StringVec" value="alignment5"/>
  <!--List of hit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="hitCollectionNames" type="StringVec" value="hitCollectionNames"/>
  <!--List of refhit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="refhitCollectionNames" type="StringVec" value="hitCollectionNames"/>
</processor>

 <processor name="DafFitter" type="EUTelDafFitter">
 <!--This processor preforms track reconstruction. The tracks are as final track fit for analysis.-->
  <!--Collection name for fitted tracks-->
  <parameter name="TrackCollectionName" type="string" lcioOutType="Track"> tracks6 </parameter>
  <!--Should plots be made and filled?-->
  <!--parameter name="AddToLCIO" type="bool" value="true"/-->
  <!--Names of alignment collections, should be in same order as application-->
  <parameter name="AlignmentCollectionNames" type="StringVec"> alignment1 alignment2 alignment3 alignment4 alignment5 </parameter>
  <!--DAF fitter: The cutoff value for a measurement to be included in the fit.-->
  <parameter name="Chi2Cutoff" type="float" value="10"/>
  <!--List of sensor IDs for the DUT planes. Used to make the decision on whether ro accept the track or not. These planes are not used in track finder, and not in the track fitter unless option 'useDutsInFit' is set.-->
  <parameter name="DutPlanes" type="IntVec" value="6"/>
  <!--Sigma of telescope resolution in the global X plane,-->
  <parameter name="DutResolutionX" type="float" value="35"/>
  <!--Sigma of telescope resolution in the global Y plane,-->
  <parameter name="DutResolutionY" type="float" value="25"/>
  <!--Beam energy [GeV], used to calculate amount of scatter-->
  <parameter name="Ebeam" type="float" value="5"/>
  <!--Track finding: The maximum allowed normalized distance between to hits in the xy plane for inclusion in track candidate.-->
  <parameter name="FinderRadius" type="float" value="150"/>
  <!--Set this to true if you want DUTs to be included in the track fit-->
  <parameter name="FitDuts" type="bool" value="false"/>
  <!--Names of input hit collections-->
  <parameter name="HitCollectionName" type="StringVec" value="AlignedHit5"/>
  <!--Should plots be made and filled?-->
  <parameter name="MakePlots" type="bool" value="true"/>
  <!--Maximum allowed global chi2/ndof-->
  <parameter name="MaxChi2OverNdof" type="float" value="5"/>
  <!--maximum devianve for dx/dz in CKF track finder-->
  <!--parameter name="MaxXdxDeviance" type="float" value="0.01"/-->
  <!--maximum devianve for dy/dz in CKF track finder-->
  <!--parameter name="MaxYdxDeviance" type="float" value="0.01"/-->
  <!--How many DUT hits do we need in order to accept track?-->
  <parameter name="NDutHits" type="int" value="0"/>
  <!--dx/dz assumed by track finder-->
  <parameter name="NominalDxdz" type="float" value="0.0"/>
  <!--dy/dz assumed by track finder-->
  <parameter name="NominalDydz" type="float" value="0.0"/>
  <!--Radiation lengths of planes, ordered by z-pos..-->
  <!--parameter name="RadiationLengths" type="FloatVec"> </parameter-->
  <!--reference hit collection name -->
  <parameter name="ReferenceCollection" type="string" value="referenceHit"/>
  <!--How many telescope planes do we require to be included in the fit?-->
  <parameter name="RequireNTelPlanes" type="float" value="3"/>
  <!--Sigma resolution of planes, ordered by z-pos.-->
  <!--parameter name="ResolutionX" type="FloatVec"> </parameter-->
  <!--Sigma resolution of planes, ordered by z-pos.-->
  <!--parameter name="ResolutionY" type="FloatVec"> </parameter-->
  <!--Sigma of telescope resolution in the global X plane,-->
  <parameter name="TelResolutionX" type="float" value="5.0"/>
  <!--Sigma of telescope resolution in the global Y plane,-->
  <parameter name="TelResolutionY" type="float" value="5.0"/>
  <!--List of sensor IDs for the telescope planes. These planes are used for the track finder, and track fitter.-->
  <parameter name="TelescopePlanes" type="IntVec"> 0 1 2 </parameter>
  <!--Do you want the reference hit collection to be used for coordinate transformations?-->
  <!--parameter name="UseReferenceCollection" type="bool" value="true"/-->
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <parameter name="Verbosity" type="string" value="MESSAGE2"/>
  <!--Name of the clusterfinder which should be used, available are: simpleCluster and combinatorialKF-->
  <parameter name="clusterfinder" type="string" value="simpleCluster"/>
  <!--List of hit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="mccollections" type="StringVec"> </parameter>
</processor>

 <processor name="Ntuple" type="EUTelFitTupleAlibava">
 <!--Prepare n-tuple with track fit results. Do some DUT analysis.-->
  <!--Name of the input track collection.-->
  <parameter name="InputCollectionName" type="string" lcioInType="Track"> tracks6 </parameter>
  <!--Name of the input DUT hit collection.-->
  <parameter name="InputDUTCollectionName" type="string" lcioInType="TrackerHit"> AlignedHit5 </parameter>
  <!--To compare matched hit positions against reconstructed clusters we need the name of the Alibava cluster collection.-->
  <parameter name="AlibavaClusterCollectionName" type="string" value="alibava_clusters"/>
  <!--Is there an Alibava DUT? If so, the alibava header data and reco data will also be written into the ntuple.-->
  <parameter name="AlibavaOutput" type="bool" value="true"/>
  <!--If we are outputing the alibava data, this is the collection it is stored in.-->
  <parameter name="AlibavaRecoCollectionName" type="string" value="filteredcollection2"/>
  <!--Alibava data from before a filtering step-->
  <!--parameter name="AlibavaUnfilteredCollectionName" type="string" value="recodata_cmmd"/-->
  <!--The hit collection name of previously applied alignments, e.g. 'AlignedHit'-->
  <!--parameter name="AlignedHitPrefix" type="string" value="AlignedHit"/-->
  <!--To reconstruct the local DUT coordinates, all alignment collection names which have been applied must be entered here. The order should correspond to their application, i.e.: alignment1 alignment2 etc.-->
  <parameter name="AlignmentCollectionName" type="StringVec"> alignment1 alignment2 alignment3 alignment4 alignment5 </parameter>
  <!--These coordinates will be read from the gear file and used to position the DUT in the telescope and determine the track impact position. 0 to continue with a coordinate as it is in the input file collection, 1 to load the corresponding shift or rotation from the gear file. If the DUT is rotated, the coordinate should be switched on! Coordinates are: (X, Y, Z, ZY, ZX, XY).-->
  <parameter name="DUTalignment" type="FloatVec"> 0 0 0 0 0 0 </parameter>
  <!--Maximum allowed distance in mm between fit and matched DUT hit in X.-->
  <parameter name="DistMax_X" type="double" value="1"/>
  <!--Maximum allowed distance in mm between fit and matched DUT hit in Y.-->
  <parameter name="DistMax_Y" type="double" value="0.2"/>
  <!--This processor can provide additional alignment for the DUT from its residuals. This is the flag to switch this on.-->
  <parameter name="DoAlignment" type="bool" value="true"/>
  <!--If the DoAlignment flag is set, set this to true to provide alignment in XY-direction (gamma). False will provide alignment in ZY-direction (alpha), if x is the unsensitive axis or in ZX-direction (beta), if y is the unsensitive axis.-->
  <!--parameter name="DoGamma" type="bool" value="true"/-->
  <!--Additional residual histograms are created with these fiducial cuts: Xmin, Xmax, Ymin, Ymax. All are in global coordinates and in mm.-->
  <parameter name="Fiducial" type="FloatVec"> 0 6 -99 99 </parameter>
  <!--The telescope layer ID of the DUT.-->
  <parameter name="ManualDUTid" type="int" value="6"/>
  <!--The maximum number of tracks considered per event.-->
  <parameter name="MaxTracksPerEvent" type="int" value="99"/>
  <!--Value written to the ntuple for missing measurements.-->
  <parameter name="MissingValue" type="double" value="-999"/>
  <!--The original hit collection name before any alignment is added.-->
  <!--parameter name="OriginalHitCollection" type="string" value="PreAlignedHit2"/-->
  <!--Any pre-Prealignment applied to the original hit collection.-->
  <!--parameter name="OriginalPreAlignment" type="string" value="prealignment"/-->
  <!--If we want to do our own DUT alignment here, this is the filename it will be stored in.-->
  <parameter name="OutputAlignment" type="string" value="@DatabasePath@/@FilePrefix@-alignment-6.slcio"/>
  <!--The polarity of our DUT. -1 for p-type, 1 for n-type-->
  <!--parameter name="Polarity" type="int" value="-1"/-->
  <!--The hit collection name of previously applied prealignments, e.g. 'PreAlignedHit'-->
  <!--parameter name="PreAlignedHitPrefix" type="string" value="PreAlignedHit"/-->
  <!--To reconstruct the local DUT coordinates, all prealignment collection names which have been applied must be entered here. The order should correspond to their application, i.e.: prealignment1 prealignment2 etc.-->
  <!--parameter name="PreAlignmentCollectionName" type="StringVec"> </parameter-->
  <!--If this flag is set to true, an aligned hit from the DUT will be dealigned with the loaded alignment and prealignment collections and compared to the original DUT hit. This is only to check the correct loading and application of DUT alignment constants. DEBUG2 or lower should be set-->
  <parameter name="RecheckDealignment" type="bool" value="false"/>
  <!--The name of the reference collection. This is needed to get the correct Z DUT position after alignments.-->
  <!--parameter name="ReferenceCollectionName" type="string" value="referenceHit"/-->
  <!--The hit collection name without any alignment, e.g. 'hit'-->
  <!--parameter name="UnAlignedHitPrefix" type="string" value="hit"/-->
  <!--If we have a strip sensor DUT, set the unsensitive axis here (x or y). This will be used for the additional alignment (if you switch it on).-->
  <parameter name="UnsensitiveAxis" type="string" value="x"/>
  <!--Set to true to use any DUT.-->
  <parameter name="UseManualDUT" type="bool" value="true"/>
  <!--Subtract any pre-Prealignment applied to the original hit collection?-->
  <!--parameter name="UseOriginalPreAlignment" type="bool" value="true"/-->
  <!--Use an existing track fit to estimate impact position? If false, a guess will be used.-->
  <parameter name="UseTrackFit" type="bool" value="true"/>
  <!--Use triplet from upstream telescope to estimate impact position? If false, result of UseTrackFit will be used-->
  <parameter name="UseTriplet" type="bool" value="false"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="Save" type="EUTelOutputProcessor">
 <!--Writes the current event to the specified LCIO outputfile. Eventually it adds a EORE at the of the file if it was missing Needs to be the last ActiveProcessor.-->
  <!--drops the named collections from the event-->
  <parameter name="DropCollectionNames" type="StringVec"> hit_eta3x3 alignedHit_eta3x3 </parameter>
  <!--drops all collections of the given type from the event-->
  <!--parameter name="DropCollectionTypes" type="StringVec"> SimTrackerHit SimCalorimeterHit </parameter-->
  <!-- write complete objects in subset collections to the file (i.e. ignore subset flag)-->
  <!--parameter name="FullSubsetCollections" type="StringVec" value="MCParticlesSkimmed"/-->
  <!--force keep of the named collections - overrules DropCollectionTypes (and DropCollectionNames)-->
  <!--parameter name="KeepCollectionNames" type="StringVec" value="MyPreciousSimTrackerHits"/-->
  <!-- name of output file -->
  <parameter name="LCIOOutputFile" type="string" value="@LcioPath@/run@RunNumber@-alibava-tracking-1.slcio"/>
  <!--write mode for output file:  WRITE_APPEND or WRITE_NEW-->
  <parameter name="LCIOWriteMode" type="string" value="WRITE_NEW"/>
  <!--Set it to true to remove intermediate EORE in merged runs-->
  <parameter name="SkipIntermediateEORE" type="bool" value="true"/>
  <!--will split output file if size in kB exceeds given value - doesn't work with APPEND and NEW-->
  <!--parameter name="SplitFileSizekB" type="int" value="1992294"/-->
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

</marlin>
