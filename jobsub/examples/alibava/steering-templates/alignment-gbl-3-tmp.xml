<?xml version="1.0" encoding="us-ascii"?>
<!-- ?xml-stylesheet type="text/xsl" href="http://ilcsoft.desy.de/marlin/marlin.xsl"? -->
<!-- ?xml-stylesheet type="text/xsl" href="marlin.xsl"? -->

<!--
============================================================================================================================
   Steering File generated by Marlin GUI on Mon Oct 17 11:35:03 2016

   WARNING: - Please be aware that comments made in the original steering file were lost.
            - Processors that are not installed in your Marlin binary lost their parameter's descriptions and types as well.
            - Extra parameters that aren't categorized as default in a processor lost their description and type.
============================================================================================================================
-->


<marlin xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ilcsoft.desy.de/marlin/marlin.xsd">

   <execute>
      <processor name="AIDA"/>
      <processor name="LoadRefHitDB"/>
      <processor name="LoadCoordinatorPreAlignment"/>
      <processor name="LoadAlignment1"/>
      <processor name="ApplyAlignment1"/>
      <processor name="LoadAlignment2"/>
      <processor name="ApplyAlignment2"/>
      <processor name="AlignGBL"/>
   </execute>

   <global>
      <parameter name="LCIOInputFiles"> @LcioPath@/@FilePrefix@-coordinator.slcio </parameter>
      <parameter name="GearXMLFile" value="@GearFilePath@/@GearFile@"/>
      <parameter name="MaxRecordNumber" value="@MaxRecordNumber@"/>
      <parameter name="SkipNEvents" value="@SkipNEvents@"/>
      <parameter name="SupressCheck" value="false"/>
      <parameter name="Verbosity" value="@Verbosity@"/>
   </global>

 <processor name="AIDA" type="AIDAProcessor">
 <!--Processor that handles AIDA files. Creates on directory per processor.  Processors only need to create and fill the histograms, clouds and tuples. Needs to be the first ActiveProcessor-->
  <!-- compression of output file 0: false >0: true (default) -->
  <parameter name="Compress" type="int" value="1"/>
  <!-- filename without extension-->
  <parameter name="FileName" type="string" value="@HistogramPath@/@Output@-alibava-alignment-3-gbl"/>
  <!-- type of output file root (default) or xml )-->
  <parameter name="FileType" type="string" value="root"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="LoadRefHitDB" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:align:tel"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> referenceHit @DatabasePath@/@FilePrefix@-referencehit.slcio referenceHit </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="LoadCoordinatorPreAlignment" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:align:tel"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> coordinatorprealignment @DatabasePath@/@FilePrefix@-prealignment.slcio alignment </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="LoadAlignment1" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:align:tel"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> alignment1 @DatabasePath@/@FilePrefix@-alignment-1-gbl.slcio alignment </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="ApplyAlignment1" type="EUTelApplyAlignmentProcessor">
 <!--Apply to the input hit the alignment corrections-->
  <!--Alignment constant from the condition file-->
  <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> alignment1 </parameter>
  <!--The name of the input hit collection-->
  <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> PreAlignedHit2 </parameter>
  <!--The name of the output hit collection-->
  <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> AlignedHit1 </parameter>
  <!--Rotation Angle around X axis-->
  <!--parameter name="Alpha" type="double" value="0"/-->
  <!--Available directions are:
 0 -> direct  
 1 -> reverse -->
  <parameter name="ApplyAlignmentDirection" type="int" value="0"/>
  <!--Do you want the reference hit collection to be corrected by the shifts and tilts from the alignment collection?-->
  <parameter name="ApplyToReferenceCollection" type="bool" value="1"/>
  <!--Rotation Angle around Y axis-->
  <!--parameter name="Beta" type="double" value="0"/-->
  <!--Available methods are:
 0 -> shift only 
 1 -> rotation first 
 2 -> shift first -->
  <parameter name="CorrectionMethod" type="int" value="1"/>
  <!--Enable or disable DEBUG mode -->
  <parameter name="DEBUG" type="bool" value="false"/>
  <!--Implement geometry shifts and rotations as described in alignmentCollectionName -->
  <parameter name="DoAlignCollection" type="bool" value="true"/>
  <!--Apply alignment steps in one go. Is supposed to be used for reversealignment in reverse order, like: undoAlignment, undoPreAlignment, undoGear -->
  <!--parameter name="DoAlignmentInOneGo" type="bool" value="false"/-->
  <!--Implement geometry shifts and rotations as described in GEAR steering file -->
  <!--parameter name="DoGear" type="bool" value="false"/-->
  <!--Rotation Angle around Z axis-->
  <!--parameter name="Gamma" type="double" value="0"/-->
  <!--Enable or disable histograms-->
  <parameter name="HistogramSwitch" type="bool" value="false"/>
  <!--This is the name of the modified output reference hit collection-->
  <!--parameter name="OutputReferenceCollection" type="string" value="output_refhit"/-->
  <!--Events number to have DEBUG1 printed outs (default=10)-->
  <parameter name="PrintEvents" type="int" value="10"/>
  <!--This is the name of the reference hit collection-->
  <!--parameter name="ReferenceCollection" type="string" value="referenceHit"/-->
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
  <!--List of alignment collections that were applied to the DUT-->
  <parameter name="alignmentCollectionNames" type="StringVec" value="alignment1"/>
  <!--List of hit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="hitCollectionNames" type="StringVec" value="hitCollectionNames"/>
  <!--List of refhit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="refhitCollectionNames" type="StringVec" value="hitCollectionNames"/>
</processor>

 <processor name="LoadAlignment2" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:align:tel"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> alignment2 @DatabasePath@/@FilePrefix@-alignment-2-gbl.slcio alignment </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="ApplyAlignment2" type="EUTelApplyAlignmentProcessor">
 <!--Apply to the input hit the alignment corrections-->
  <!--Alignment constant from the condition file-->
  <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> alignment2 </parameter>
  <!--The name of the input hit collection-->
  <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> AlignedHit1 </parameter>
  <!--The name of the output hit collection-->
  <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> AlignedHit2 </parameter>
  <!--Rotation Angle around X axis-->
  <!--parameter name="Alpha" type="double" value="0"/-->
  <!--Available directions are:
 0 -> direct  
 1 -> reverse -->
  <parameter name="ApplyAlignmentDirection" type="int" value="0"/>
  <!--Do you want the reference hit collection to be corrected by the shifts and tilts from the alignment collection?-->
  <parameter name="ApplyToReferenceCollection" type="bool" value="1"/>
  <!--Rotation Angle around Y axis-->
  <!--parameter name="Beta" type="double" value="0"/-->
  <!--Available methods are:
 0 -> shift only 
 1 -> rotation first 
 2 -> shift first -->
  <parameter name="CorrectionMethod" type="int" value="1"/>
  <!--Enable or disable DEBUG mode -->
  <parameter name="DEBUG" type="bool" value="false"/>
  <!--Implement geometry shifts and rotations as described in alignmentCollectionName -->
  <parameter name="DoAlignCollection" type="bool" value="true"/>
  <!--Apply alignment steps in one go. Is supposed to be used for reversealignment in reverse order, like: undoAlignment, undoPreAlignment, undoGear -->
  <!--parameter name="DoAlignmentInOneGo" type="bool" value="false"/-->
  <!--Implement geometry shifts and rotations as described in GEAR steering file -->
  <!--parameter name="DoGear" type="bool" value="false"/-->
  <!--Rotation Angle around Z axis-->
  <!--parameter name="Gamma" type="double" value="0"/-->
  <!--Enable or disable histograms-->
  <parameter name="HistogramSwitch" type="bool" value="false"/>
  <!--This is the name of the modified output reference hit collection-->
  <!--parameter name="OutputReferenceCollection" type="string" value="output_refhit"/-->
  <!--Events number to have DEBUG1 printed outs (default=10)-->
  <parameter name="PrintEvents" type="int" value="10"/>
  <!--This is the name of the reference hit collection-->
  <!--parameter name="ReferenceCollection" type="string" value="referenceHit"/-->
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
  <!--List of alignment collections that were applied to the DUT-->
  <parameter name="alignmentCollectionNames" type="StringVec" value="alignment2"/>
  <!--List of hit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="hitCollectionNames" type="StringVec" value="hitCollectionNames"/>
  <!--List of refhit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="refhitCollectionNames" type="StringVec" value="hitCollectionNames"/>
</processor>

 <processor name="AlignGBL" type="EUTelMilleGBL">
 <!--EUTelMilleGBL searches for tracks and fits them with GBL. Tracks are passed to MILLEPEDE II to get alignment constants and the fitted tracks and fitted hits are written to LCIO for possible further analysis.-->
  <!--Hit collections names-->
  <parameter name="HitCollectionName" type="string" lcioInType="TrackerHit"> AlignedHit2 </parameter>
  <!--Number of alignment constants used. Available mode are: 1: shift in Z only. 2: shifts in X and Y. 3: shifts in X and Y and rotation around the Z axis, 4: shifts in X,Y and Z and rotation around the Z axis. 5: shifts in X,Y and rotations around all axis, fix Z. 6: shifts in X,Y and Z and rotations around all axis. 7: Shifts in X, Y and Z. Note that in modes 5 and 6, alignment constants in alpha and beta will only be returned for rotated/tilted sensors.-->
  <parameter name="AlignMode" type="int" value="5"/>
  <!--All alignment collection names which have been applied must be entered here. The order should correspond to their application, i.e.: alignment1 alignment2 etc.-->
  <parameter name="AlignmentCollectionName" type="StringVec"> alignment1 alignment2 </parameter>
  <!--This is the name of the alignment collection to be saved into the slcio file-->
  <parameter name="AlignmentConstantCollectionName" type="string" value="alignment"/>
  <!--This is the name of the LCIO file name with the output alignment-->
  <parameter name="AlignmentConstantLCIOFile" type="string" value="@DatabasePath@/@FilePrefix@-alignment-3-gbl.slcio"/>
  <!--Name of the Millepede binary output file.-->
  <parameter name="BinaryFilename" type="string" value="@DatabasePath@/@FilePrefix@-align-mille-3-gbl.bin"/>
  <!--Cut in Chi2/Ndf, tracks below are accepted-->
  <parameter name="Chi2NdfCut" type="double" value="10"/>
  <!--The Coordinator PreAlignment to be loaded-->
  <parameter name="CoordinatorPreAlignmentCollectionName" type="string" value="coordinatorprealignment"/>
  <!--Methods with which to get the DUT fit position: 0: centre of the DUT (bad if DUT is rotated), 1: extrapolate from triplet and get intersect with plane, 2: extrapolate from driplet, 3: get average from methods 1 and 2.-->
  <parameter name="DUTFitMethod" type="int" value="3"/>
  <!--DUT resolution in x [um]-->
  <parameter name="DUTResX" type="double" value="700"/>
  <!--DUT resolution in y [um]-->
  <parameter name="DUTResY" type="double" value="50"/>
  <!--Do DUT Alignment? 1 = a, 2 = b, 3 = g, 0 = no-->
  <!--parameter name="DoDUTAlignment" type="int" value="0"/-->
  <!--Do Prealignment? 1 = yes, 0 = no, 2 = yes, with zero Prealignment-->
  <!--parameter name="DoPreAlignment" type="int" value="0"/-->
  <!--Beam energy in GeV-->
  <parameter name="Ebeam" type="double" value="5.0"/>
  <!--Exclude planes from fit according to their sensor ids.-->
  <!--parameter name="ExcludePlanes" type="IntVec"> </parameter-->
  <!--Fixes the given alignment parameters in the fit. For each sensor an integer must be specified (If no value is given, then all parameters will be free). bit 0 = x shift, bit 1 = y shift, bit 2 = z shift, bit 3 = alpha, bit 4 = beta, bit 5 = gamma. Note: these numbers are ordered according to the z position of the sensors and NOT according to the sensor id.-->
  <!--parameter name="FixParameter" type="IntVec"> 24 24 24 24 24 24 </parameter-->
  <!--Fix sensor planes in the fit according to their sensor ids.-->
  <parameter name="FixedPlanes" type="IntVec"> 0 5 </parameter>
  <!--Generate a steering file for the pede program? 0 = false, 1 = true.-->
  <parameter name="GeneratePedeSteerfile" type="int" value="1"/>
  <!--Selects the source of input hits: 0: hits read from hitfile with simple trackfinding. 2: Test mode. Simple internal simulation and simple trackfinding.-->
  <parameter name="InputMode" type="int" value="0"/>
  <!--The id number of the DUT (usually 6).-->
  <!--parameter name="ManualDUTid" type="int" value="6"/-->
  <!--Maximal number of track candidates in the whole run.-->
  <parameter name="MaxTrackCandidatesTotal" type="int" value="10000000"/>
  <!--The name of the output fit hit collection-->
  <!--parameter name="OutputHitCollection" type="string" value="fithits"/-->
  <!--The name of the output track fit collection-->
  <!--parameter name="OutputTrackCollection" type="string" value="fittracks"/-->
  <!--Name of the steering file for the pede program.-->
  <parameter name="PedeSteerfileName" type="string" value="@DatabasePath@/@FilePrefix@-pede-steer-3-gbl.txt"/>
  <!--All prealignment collection names which have been applied must be entered here. The order should correspond to their application, i.e.: prealignment1 prealignment2 etc.-->
  <!--parameter name="PreAlignmentCollectionName" type="StringVec" value="prealign"/-->
  <!--Probability Cut, tracks above are accepted-->
  <parameter name="ProbCut" type="double" value="0.01"/>
  <!--REF resolution in x [um]-->
  <parameter name="REFResX" type="double" value="50"/>
  <!--REF resolution in y [um]-->
  <parameter name="REFResY" type="double" value="50"/>
  <!--Require DUT hit for valid track? 0 = false, 1 = true.-->
  <!--parameter name="RequireDUTHit" type="int" value="1"/-->
  <!--Execute the pede program using the generated steering file? 0 = false, 1 = true.-->
  <parameter name="RunPede" type="int" value="1"/>
  <!--Track slope cut in x, tracks below are accepted-->
  <!--parameter name="SlopeCutDUTx" type="double" value="10"/-->
  <!--Track slope cut in y, tracks below are accepted-->
  <!--parameter name="SlopeCutDUTy" type="double" value="10"/-->
  <!--Telescope resolution in x [um]-->
  <parameter name="TelescopeResX" type="double" value="10"/>
  <!--Telescope resolution in y [um]-->
  <parameter name="TelescopeResY" type="double" value="10"/>
  <!--Rotation around the x axis of the sensors in test mode (to be determined by the alignment).-->
  <!--parameter name="TestModeSensorAlpha" type="FloatVec"> 0 0 0 0 0 0 0 0 0 0 </parameter-->
  <!--Rotation around the y axis of the sensors in test mode (to be determined by the alignment).-->
  <!--parameter name="TestModeSensorBeta" type="FloatVec"> 0 0 0 0 0 0 0 0 0 0 </parameter-->
  <!--Rotation around the z axis of the sensors in test mode (to be determined by the alignment).-->
  <!--parameter name="TestModeSensorGamma" type="FloatVec"> 0 0 0 0 0 0 0 0 0 0 </parameter-->
  <!--Resolution assumed for the sensors in test mode.-->
  <!--parameter name="TestModeSensorResolution" type="float" value="3"/-->
  <!--X shifts of the sensors in test mode (to be determined by the alignment).-->
  <!--parameter name="TestModeSensorXShifts" type="FloatVec"> 0 0 0 0 0 0 0 0 0 0 </parameter-->
  <!--Y shifts of the sensors in test mode (to be determined by the alignment).-->
  <!--parameter name="TestModeSensorYShifts" type="FloatVec"> 0 0 0 0 0 0 0 0 0 0 </parameter-->
  <!--Z positions of the sensors in test mode.-->
  <!--parameter name="TestModeSensorZPositions" type="FloatVec"> 20000 40000 60000 80000 100000 120000 140000 160000 180000 200000 </parameter-->
  <!--Width of the track slope distribution in the x direction in test mode.-->
  <!--parameter name="TestModeXTrackSlope" type="float" value="0.0005"/-->
  <!--Width of the track slope distribution in the y direction in test mode.-->
  <!--parameter name="TestModeYTrackSlope" type="float" value="0.0005"/-->
  <!--Flag to fill dt histograms. Will increase file size quite a bit.-->
  <!--parameter name="TimeDependencyHistos" type="bool" value="false"/-->
  <!--Use Reference Plane?-->
  <parameter name="UseREF" type="bool" value="@SetupRef@"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <parameter name="Verbosity" type="string" value="DEBUG9"/>
  <!--Downstream triplet residual cut [um]-->
  <parameter name="driCut" type="double" value="150."/>
  <!--Downstream driplet REF residual cut x [um]-->
  <parameter name="driCutREFx" type="double" value="350"/>
  <!--Downstream driplet REF residual cut y [um]-->
  <parameter name="driCutREFy" type="double" value="350"/>
  <!--Upstream-Downstream Track matching cut [um]-->
  <parameter name="sixCut" type="double" value="400."/>
  <!--Upstream triplet residual cut [um]-->
  <parameter name="triCut" type="double" value="150."/>
  <!--Upstream triplet DUT residual cut x [um]-->
  <parameter name="triCutDUTx" type="double" value="350."/>
  <!--Upstream triplet DUT residual cut y [um]-->
  <parameter name="triCutDUTy" type="double" value="350."/>
</processor>

</marlin>
