<?xml version="1.0" encoding="us-ascii"?>
<!-- ?xml-stylesheet type="text/xsl" href="http://ilcsoft.desy.de/marlin/marlin.xsl"? -->
<!-- ?xml-stylesheet type="text/xsl" href="marlin.xsl"? -->

<!--
============================================================================================================================
   Steering File generated by Marlin GUI on Fri Aug  2 11:50:05 2013

   WARNING: - Please be aware that comments made in the original steering file were lost.
            - Processors that are not installed in your Marlin binary lost their parameter's descriptions and types as well.
            - Extra parameters that aren't categorized as default in a processor lost their description and type.
============================================================================================================================
-->


<marlin xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ilcsoft.desy.de/marlin/marlin.xsd">

   <execute>
      <processor name="AIDA"/>
      <processor name="LoadAlignment"/>
      <processor name="ApplyAlignment"/>
      <processor name="TrackSearch"/>
      <processor name="GBLTrackFit"/>
      <processor name="Save"/>
      <processor name="PrintEventNumber"/>
   </execute>

   <global>
      <parameter name="LCIOInputFiles"> @LcioPath@/@FilePrefix@-trackcand.slcio </parameter>
      <parameter name="GearXMLFile" value="@GearFilePath@/@GearFile@"/>
      <parameter name="MaxRecordNumber" value="@MaxRecordNumber@"/>
      <parameter name="SkipNEvents" value="@SkipNEvents@"/>
      <parameter name="SupressCheck" value="false"/>
      <parameter name="Verbosity" value="@Verbosity@"/>
   </global>

 <processor name="AIDA" type="AIDAProcessor">
 <!--Processor that handles AIDA files. Creates on directory per processor.  Processors only need to create and fill the histograms, clouds and tuples. Needs to be the first ActiveProcessor-->
  <!-- compression of output file 0: false >0: true (default) -->
  <parameter name="Compress" type="int" value="1"/>
  <!-- filename without extension-->
  <parameter name="FileName" type="string" value="@HistogramPath@/@FilePrefix@-trackfit"/>
  <!-- type of output file root (default) or xml )-->
  <parameter name="FileType" type="string" value="root"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="LoadAlignment" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:calvin:hobbes"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> alignment @AlignmentFile@ alignment </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="ApplyAlignment" type="EUTelApplyAlignmentProcessor">
 <!--Apply to the input hit the alignment corrections-->
  <!--Alignment constant from the condition file-->
  <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> alignment </parameter>
  <!--The name of the input hit collection-->
  <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> hit </parameter>
  <!--The name of the output hit collection-->
  <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> aligned_hit </parameter>
  <!--Rotation Angle around X axis-->
  <!--parameter name="Alpha" type="double" value="0"/-->
  <!--Available directinos are:
 0 -> direct  
 1 -> reverse -->
  <parameter name="ApplyAlignmentDirection" type="int" value="0"/>
  <!--Do you want the reference hit collection to be corrected by the shifts and tilts from the alignment collection?-->
  <!--parameter name="ApplyToReferenceCollection" type="bool" value="true"/-->
  <!--Rotation Angle around Y axis-->
  <!--parameter name="Beta" type="double" value="0"/-->
  <!--Available methods are:
 0 -> shift only 
 1 -> rotation first 
 2 -> shift first -->
  <parameter name="CorrectionMethod" type="int" value="1"/>
  <!--Enable or disable DEBUG mode -->
  <parameter name="DEBUG" type="bool" value="false"/>
  <!--Implement geometry shifts and rotations as described in alignmentCollectionName -->
  <parameter name="DoAlignCollection" type="bool" value="true"/>
  <!--Apply alignment steps in one go. Is supposed to be used for reversealignment in reverse order, like: undoAlignment, undoPreAlignment, undoGear -->
  <!--parameter name="DoAlignmentInOneGo" type="bool" value="false"/-->
  <!--Implement geometry shifts and rotations as described in GEAR steering file -->
  <!--parameter name="DoGear" type="bool" value="false"/-->
  <!--Rotation Angle around Z axis-->
  <!--parameter name="Gamma" type="double" value="0"/-->
  <!--Enable or disable histograms-->
  <parameter name="HistogramSwitch" type="bool" value="false"/>
  <!--This is the name of the modified output reference hit collection-->
  <!--parameter name="OutputReferenceCollection" type="string" value="output_refhit"/-->
  <!--Events number to have DEBUG1 printed outs (default=10)-->
  <parameter name="PrintEvents" type="int" value="0"/>
  <!--This is the name of the reference hit collection-->
  <!--parameter name="ReferenceCollection" type="string" value="referenceHit"/-->
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
  <!--List of alignment collections that were applied to the DUT-->
  <parameter name="alignmentCollectionNames" type="StringVec" value="alignment"/>
  <!--List of hit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="hitCollectionNames" type="StringVec" value="hitCollectionNames"/>
  <!--List of refhit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="refhitCollectionNames" type="StringVec" value="hitCollectionNames"/>
</processor>

 <processor name="TrackSearch" type="EUTelProcessorTrackingExhaustiveTrackSearch">
 <!--EUTelProcessorTrackingExhaustiveTrackSearch preforms track pattern recognition.-->
  <!--Input hits collection name-->
  <parameter name="HitInputCollectionName" type="string" lcioInType="TrackerHit"> aligned_hit </parameter>
  <!--Output track candidates hits collection name-->
  <parameter name="TrackCandHitOutputCollectionName" type="string" lcioOutType="Track"> aligned_track_candidates </parameter>
  <!--Finder mode. Possible values are 1 (rectangular search window), 2 (circular search window)-->
  <!--parameter name="FinderMode" type="int" value="3"/-->
  <!--Name of histogram info xml file-->
  <!--parameter name="HistogramInfoFilename" type="string" value="histoinfo.xml"/-->
  <!--Name of the hot pixel collection -->
  <!--parameter name="HotPixelCollectionName" type="string" value="hotpixel"/-->
  <!--Maximal number of missing hits on a track candidate-->
  <parameter name="MaxMissingHitsPerTrack" type="int" value="@MaxMissingHitsPerTrack@"/>
  <!--Maximal number of track candidates to be found in events-->
  <parameter name="MaxNTracksPerEvent" type="int" value="@MaxNTracksPerEvent@"/>
  <!--Maximal allowed distance between hits entering the recognition step per 15 cm space between the planes. One value for each neighbor planes. DistanceMax will be used for each pair if this vector is empty. Units are mm.-->
  <parameter name="ResidualsRMax" type="FloatVec"> 0.25 0.25 0.25 0.25 0.25 0.25 </parameter>
  <!--Maximal values of the hit residuals in the X direction for a track. Note: these numbers are ordered according to the z position of the sensors and NOT according to the sensor id. Units are mm.-->
  <parameter name="ResidualsXMax" type="FloatVec"> 0.25 0.25 0.25 0.25 0.25 0.25 </parameter>
  <!--Minimal values of the hit residuals in the X direction for a track. Note: these numbers are ordered according to the z position of the sensors and NOT according to the sensor id. Units are mm.-->
  <parameter name="ResidualsXMin" type="FloatVec"> -0.25 -0.25 -0.25 -0.25 -0.25 -0.25 </parameter>
  <!--Maximal values of the hit residuals in the Y direction for a track. Note: these numbers are ordered according to the z position of the sensors and NOT according to the sensor id. Units are mm.-->
  <parameter name="ResidualsYMax" type="FloatVec"> 0.25 0.25 0.25 0.25 0.25 0.25 </parameter>
  <!--Minimal values of the hit residuals in the Y direction for a track. Note: these numbers are ordered according to the z position of the sensors and NOT according to the sensor id. Units are mm.-->
  <parameter name="ResidualsYMin" type="FloatVec"> -0.25 -0.25 -0.25 -0.25 -0.25 -0.25 </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="GBLTrackFit" type="EUTelProcessorTrackingGBLTrackFit">
 <!--EUTelProcessorTrackingGBLTrackFit performs track fits using GBL optionally writing data files for MILLEPEDE II.-->
  <!--Input track candidates hits collection name-->
  <parameter name="TrackCandHitInputCollectionName" type="string" lcioInType="Track"> aligned_track_candidates </parameter>
  <!--Output tracks collection name-->
  <parameter name="TracksOutputCollectionName" type="string" lcioOutType="Track"> TrackCollection </parameter>
  <!--This is the name of the LCIO file name with the output alignmentconstants (add .slcio)-->
  <!--parameter name="AlignmentConstantLCIOFile" type="string" value="alignment.slcio"/-->
  <!--Alignment mode specifies alignment degrees of freedom to be considered
0 - No alignment at all. Simply fit tracks assuming that alignment is correct
1 - Alignment of XY shifts
2 - Alignment of XY shifts + rotations around Z
3 - Alignment of XYZ shifts + rotations around Z
4 - Alignment of XY shifts + rotations around X and Z
5 - Alignment of XY shifts + rotations around Y and Z
6 - Alignment of XY shifts + rotations around X,Y and Z
7 - Alignment of XYZ shifts + rotations around X,Y and Z
-->
  <!--parameter name="AlignmentMode" type="int" value="0"/-->
  <!--Ids of planes to be used in alignment-->
  <!--parameter name="AlignmentPlanes" type="IntVec"> </parameter-->
  <!--Beam energy [GeV]-->
  <parameter name="BeamEnergy" type="double" value="@BeamEnergy@"/>
  <!--Ids of planes for which rotation around X will be fixed during millepede call-->
  <!--parameter name="FixedAlignmentPlanesXrotation" type="IntVec"> </parameter-->
  <!--Ids of planes for which X shift will be fixed during millepede call-->
  <!--parameter name="FixedAlignmentPlanesXshift" type="IntVec"> </parameter-->
  <!--Ids of planes for which rotation around Y will be fixed during millepede call-->
  <!--parameter name="FixedAlignmentPlanesYrotation" type="IntVec"> </parameter-->
  <!--Ids of planes for which Y shift will be fixed during millepede call-->
  <!--parameter name="FixedAlignmentPlanesYshift" type="IntVec"> </parameter-->
  <!--Ids of planes for which rotation around Z will be fixed during millepede call-->
  <!--parameter name="FixedAlignmentPlanesZrotation" type="IntVec"> </parameter-->
  <!--Ids of planes for which Z shift will be fixed during millepede call-->
  <!--parameter name="FixedAlignmentPlanesZshift" type="IntVec"> </parameter-->
  <!--GBL outlier down-weighting option (t,h,c)-->
  <!--parameter name="GBLMEstimatorType" type="string" value=""/-->
  <!--Name of histogram info xml file-->
  <parameter name="HistogramInfoFilename" type="string" value="@HistoInfoFile@"/>
  <!--Name of the Millepede binary file-->
  <!--parameter name="MilleBinaryFilename" type="string" value="mille.bin"/-->
  <!--Maximum chi2 of a track candidate that goes into millepede-->
  <!--parameter name="MilleMaxChi2Cut" type="double" value="1000"/-->
  <!--Name of the Millepede result file-->
  <!--parameter name="MilleResultFilename" type="string" value="millepede.res"/-->
  <!--Name of the Millepede steering file to be created-->
  <!--parameter name="MilleSteeringFilename" type="string" value="pede-steer.txt"/-->
  <!--FOR EXPERTS: List of commands that should be included in the pede steering file. Use '\' to seperate options and introduce a line break.-->
  <!--parameter name="PedeSteeringAdditionalCmds" type="StringVec"> </parameter-->
  <!--Execute the pede at the end of processing using the generated steering file.-->
  <!--parameter name="RunPede" type="bool" value="false"/-->
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="Save" type="EUTelOutputProcessor">
 <!--Writes the current event to the specified LCIO outputfile. Eventually it adds a EORE at the of the file if it was missing Needs to be the last ActiveProcessor.-->
  <!--drops the named collections from the event-->
  <parameter name="DropCollectionNames" type="StringVec"> hit aligned_track_candidates </parameter>
  <!--drops all collections of the given type from the event-->
  <!--parameter name="DropCollectionTypes" type="StringVec"> SimTrackerHit SimCalorimeterHit </parameter-->
  <!-- write complete objects in subset collections to the file (i.e. ignore subset flag)-->
  <!--parameter name="FullSubsetCollections" type="StringVec" value="MCParticlesSkimmed"/-->
  <!--force keep of the named collections - overrules DropCollectionTypes (and DropCollectionNames)-->
  <!--parameter name="KeepCollectionNames" type="StringVec" value="MyPreciousSimTrackerHits"/-->
  <!-- name of output file -->
  <parameter name="LCIOOutputFile" type="string" value="@LcioPath@/@FilePrefix@-trackgbl.slcio"/>
  <!--write mode for output file:  WRITE_APPEND or WRITE_NEW-->
  <parameter name="LCIOWriteMode" type="string" value="WRITE_NEW"/>
  <!--Set it to true to remove intermediate EORE in merged runs-->
  <parameter name="SkipIntermediateEORE" type="bool" value="true"/>
  <!--will split output file if size in kB exceeds given value - doesn't work with APPEND and NEW-->
  <!--parameter name="SplitFileSizekB" type="int" value="1992294"/-->
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="PrintEventNumber" type="EUTelUtilityPrintEventNumber">
 <!--EUTelUtilityPrintEventNumber prints event number to screen depending on the verbosity level-->
  <!--Print event number for every n-th event-->
  <parameter name="EveryNEvents" type="int" value="@EveryNEvents@"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
  <!--print the event timestamp as read from LCIO-->
  <parameter name="printTimestamp" type="bool" value="false"/>
</processor>

</marlin>
