<?xml version="1.0" encoding="us-ascii"?>
<!-- ?xml-stylesheet type="text/xsl" href="http://ilcsoft.desy.de/marlin/marlin.xsl"? -->
<!-- ?xml-stylesheet type="text/xsl" href="marlin.xsl"? -->

<!--
============================================================================================================================
   Steering File generated by Marlin GUI on Fri Jun 28 11:16:08 2013

   WARNING: - Please be aware that comments made in the original steering file were lost.
            - Processors that are not installed in your Marlin binary lost their parameter's descriptions and types as well.
            - Extra parameters that aren't categorized as default in a processor lost their description and type.
============================================================================================================================
-->


<marlin xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ilcsoft.desy.de/marlin/marlin.xsd">

   <execute>
      <processor name="AIDA"/>
      <processor name="GBLTrackFit"/>
      <processor name="Save"/>
      <processor name="EUTelUtilityPrintEventNumber"/>
   </execute>

   <global>
      <parameter name="LCIOInputFiles"> @LcioPath@/@FilePrefix@-trackcand.slcio </parameter>
      <parameter name="GearXMLFile" value="@GearFilePath@/@GearFile@"/>
      <parameter name="MaxRecordNumber" value="@MaxRecordNumber@"/>
      <parameter name="SkipNEvents" value="@SkipNEvents@"/>
      <parameter name="SupressCheck" value="false"/>
      <parameter name="Verbosity" value="@Verbosity@"/>
   </global>

 <processor name="AIDA" type="AIDAProcessor">
 <!--Processor that handles AIDA files. Creates on directory per processor.  Processors only need to create and fill the histograms, clouds and tuples. Needs to be the first ActiveProcessor-->
  <!-- compression of output file 0: false >0: true (default) -->
  <parameter name="Compress" type="int" value="1"/>
  <!-- filename without extension-->
  <parameter name="FileName" type="string" value="@HistogramPath@/@FilePrefix@-alignmentgbl"/>
  <!-- type of output file root (default) or xml )-->
  <parameter name="FileType" type="string" value="root"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>



 <processor name="GBLTrackFit" type="EUTelProcessorTrackingGBLTrackFit">
  <!--EUTelProcessorTrackingGBLTrackFit performs track fits using GBL optionally writing data files for MILLEPEDE II.-->
  <!--Input track candidates hits collection name-->
  <parameter name="TrackCandHitInputCollectionName" type="string" lcioInType="Track"> track_candidates </parameter>
  <!--Output tracks collection name-->
  <parameter name="TracksOutputCollectionName" type="string" lcioOutType="Track"> TrackCollection </parameter>
  <!--This is the name of the LCIO file name with the output alignmentconstants (add .slcio)-->
  <parameter name="AlignmentConstantLCIOFile" type="string" value="@DatabasePath@/@FilePrefix@-alignment.slcio"/>
  <!--Alignment mode specifies alignment degrees of freedom to be considered
0 - No alignment at all. Simply fit tracks assuming that alignment is correct
1 - Alignment of XY shifts
2 - Alignment of XY shifts + rotations around Z
3 - Alignment of XYZ shifts + rotations around Z
4 - Alignment of XY shifts + rotations around X and Z
5 - Alignment of XY shifts + rotations around Y and Z
6 - Alignment of XY shifts + rotations around X,Y and Z
7 - Alignment of XYZ shifts + rotations around X,Y and Z
-->
  <parameter name="AlignmentMode" type="int" value="@AlignmentMode@"/>
  <!--Ids of planes to be used in alignment-->
  <parameter name="AlignmentPlanes" type="IntVec" value="@AlignPlaneIds@"/>
  <!--Ids of planes to have intrinsic resolution modified /-->
  <parameter name="Planes" type="IntVec"> @Planes@ </parameter>
  <!-- on the order of appearing of the plane Ids (Planes param.) list X resolution of every plane /-->
  <parameter name="xResolutionPlane" type="FloatVec"> @ResolutionPlane@ </parameter>
  <!-- on the order of appearing of the plane Ids (Planes param.) list Y resolution of every plane /-->
  <parameter name="yResolutionPlane" type="FloatVec"> @ResolutionPlane@ </parameter>
  <!--Beam energy [GeV]-->
  <parameter name="BeamEnergy" type="double" value="@BeamEnergy@"/>
  <!--Ids of planes for which rotation around X will be fixed during millepede call-->
  <parameter name="FixedAlignmentPlanesXrotation" type="IntVec">@FixXrot@ </parameter>
  <!--Ids of planes for which X shift will be fixed during millepede call-->
  <parameter name="FixedAlignmentPlanesXshift" type="IntVec">@FixXshifts@ </parameter>
  <!--Ids of planes for which rotation around Y will be fixed during millepede call-->
  <parameter name="FixedAlignmentPlanesYrotation" type="IntVec">@FixYrot@ </parameter>
  <!--Ids of planes for which Y shift will be fixed during millepede call-->
  <parameter name="FixedAlignmentPlanesYshift" type="IntVec">@FixYshifts@</parameter>
  <!--Ids of planes for which rotation around Z will be fixed during millepede call-->
  <parameter name="FixedAlignmentPlanesZrotation" type="IntVec">@FixZrot@ </parameter>
  <!--Ids of planes for which Z shift will be fixed during millepede call-->
  <parameter name="FixedAlignmentPlanesZshift" type="IntVec">@FixZshifts@ </parameter>
  <!--GBL outlier down-weighting option (t,h,c)-->
  <!--parameter name="GBLMEstimatorType" type="string" value=""/-->
  <!--Name of histogram info xml file-->
  <parameter name="HistogramInfoFilename" type="string" value="@HistoInfoFile@"/>
  <!--Name of the Millepede binary file-->
  <parameter name="MilleBinaryFilename" type="string" value="@DatabasePath@/@FilePrefix@-align-mille.bin"/>
  <!--Maximum chi2 of a track candidate that goes into millepede-->
  <parameter name="MilleMaxChi2Cut" type="double" value="@Chi2Cut@"/>
  <!--Name of the Millepede result file-->
  <!--parameter name="MilleResultFilename" type="string" value="millepede.res"/-->
  <!--Name of the Millepede steering file to be created-->
  <parameter name="MilleSteeringFilename" type="string" value="@DatabasePath@/@FilePrefix@-pede-steer.txt"/>
  <parameter name="GearAlignedFile" type="string" value="@GearFilePath@/@GearAlignedFile@"/>
  <!--FOR EXPERTS: List of commands that should be included in the pede steering file. Use '\\' to seperate options and introduce a line break.-->
  <parameter name="PedeSteeringAdditionalCmds" type="StringVec">
method inversion 15 0.001 \\
!method diagonalization 15 0.001 \\ 
!outlierdownweighting 10. \\ 
@pede@
 </parameter>
  <!--Execute the pede at the end of processing using the generated steering file.-->
  <parameter name="RunPede" type="bool" value="@RunPede@"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="Save" type="EUTelOutputProcessor">
 <!--Writes the current event to the specified LCIO outputfile. Eventually it adds a EORE at the of the file if it was missing Needs to be the last ActiveProcessor.-->
  <!--drops the named collections from the event-->
  <parameter name="DropCollectionNames" type="StringVec" value="track_candidates"/>
  <!--drops all collections of the given type from the event-->
  <!--parameter name="DropCollectionTypes" type="StringVec"> SimTrackerHit SimCalorimeterHit </parameter-->
  <!-- write complete objects in subset collections to the file (i.e. ignore subset flag)-->
  <!--parameter name="FullSubsetCollections" type="StringVec" value="MCParticlesSkimmed"/-->
  <!--force keep of the named collections - overrules DropCollectionTypes (and DropCollectionNames)-->
  <!--parameter name="KeepCollectionNames" type="StringVec" value="MyPreciousSimTrackerHits"/-->
  <!-- name of output file -->
  <parameter name="LCIOOutputFile" type="string" value="@LcioPath@/@FilePrefix@-trackgbl.slcio"/>
  <!--write mode for output file:  WRITE_APPEND or WRITE_NEW-->
  <parameter name="LCIOWriteMode" type="string" value="WRITE_NEW"/>
  <!--Set it to true to remove intermediate EORE in merged runs-->
  <parameter name="SkipIntermediateEORE" type="bool" value="true"/>
  <!--will split output file if size in kB exceeds given value - doesn't work with APPEND and NEW-->
  <!--parameter name="SplitFileSizekB" type="int" value="1992294"/-->
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

<processor name="EUTelUtilityPrintEventNumber" type="EUTelUtilityPrintEventNumber">
  <!--EUTelUtilityPrintEventNumber prints event number to screen depending on the verbosity level-->
  <!--Print event number for every n-th event-->
  <parameter name="EveryNEvents" type="int"> 100000 </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string">DEBUG </parameter-->
  <!--print the event timestamp as read from LCIO-->
  <!--parameter name="printTimestamp" type="bool">false </parameter-->
</processor>

</marlin>
