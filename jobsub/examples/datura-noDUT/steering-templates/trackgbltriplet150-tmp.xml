<?xml version="1.0" encoding="us-ascii"?>
<!-- ?xml-stylesheet type="text/xsl" href="http://ilcsoft.desy.de/marlin/marlin.xsl"? -->
<!-- ?xml-stylesheet type="text/xsl" href="marlin.xsl"? -->

<!--
============================================================================================================================
   Steering File generated by Marlin GUI on Fri Aug  2 11:52:27 2013

   WARNING: - Please be aware that comments made in the original steering file were lost.
            - Processors that are not installed in your Marlin binary lost their parameter's descriptions and types as well.
            - Extra parameters that aren't categorized as default in a processor lost their description and type.
============================================================================================================================
-->


<marlin xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ilcsoft.desy.de/marlin/marlin.xsd">

   <execute>
      <processor name="AIDA"/>
      <processor name="LoadDB"/>
      <processor name="ApplyPreAlignment"/>
      <processor name="ApplyAlignment"/>
      <processor name="ApplyAlignment2"/>
      <processor name="ApplyAlignment3"/>
      <group name="TelDUTFitter"/>
      <processor name="MyEUTelUtilityPrintEventNumber"/>
      <processor name="Save"/>
   </execute>

   <global>
      <parameter name="LCIOInputFiles"> @LcioPath@/@FilePrefix@-hitmaker.slcio </parameter>
      <parameter name="GearXMLFile" value="@GearFilePath@/@GearFile@"/>
      <parameter name="MaxRecordNumber" value="@MaxRecordNumber@"/>
      <parameter name="SkipNEvents" value="@SkipNEvents@"/>
      <parameter name="SupressCheck" value="false"/>
      <parameter name="Verbosity" value="@Verbosity@"/>
   </global>

 <processor name="AIDA" type="AIDAProcessor">
 <!--Processor that handles AIDA files. Creates on directory per processor.  Processors only need to create and fill the histograms, clouds and tuples. Needs to be the first ActiveProcessor-->
  <!-- compression of output file 0: false >0: true (default) -->
  <parameter name="Compress" type="int" value="1"/>
  <!-- filename without extension-->
  <!--parameter name="FileName" type="string" value="@HistogramPath@/@FilePrefix@-GBLfitter-alignGBL_wAir"/-->
  <parameter name="FileName" type="string" value="@HistogramPath@/@FilePrefix@-GBLfitter-CS"/>
  <!-- type of output file root (default) or xml )-->
  <parameter name="FileType" type="string" value="root"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="LoadDB" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:align:tel"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> refhit @DatabasePath@/@FilePrefix@-referencehit.slcio referenceHit </parameter>
  <parameter name="SimpleFileHandler" type="StringVec"> refhit01 @DatabasePath@/@FilePrefix@-referencehit.slcio referenceHit </parameter>
  <parameter name="SimpleFileHandler" type="StringVec"> refhit02 @DatabasePath@/@FilePrefix@-referencehit.slcio referenceHit </parameter>
  <parameter name="SimpleFileHandler" type="StringVec"> refhit11 @DatabasePath@/@FilePrefix@-referencehit.slcio referenceHit </parameter>
  <parameter name="SimpleFileHandler" type="StringVec"> refhit12 @DatabasePath@/@FilePrefix@-referencehit.slcio referenceHit </parameter>
  <parameter name="SimpleFileHandler" type="StringVec"> refhit21 @DatabasePath@/@FilePrefix@-referencehit.slcio referenceHit </parameter>
  <parameter name="SimpleFileHandler" type="StringVec"> refhit22 @DatabasePath@/@FilePrefix@-referencehit.slcio referenceHit </parameter>
  <parameter name="SimpleFileHandler" type="StringVec"> refhit31 @DatabasePath@/@FilePrefix@-referencehit.slcio referenceHit </parameter>
  <parameter name="SimpleFileHandler" type="StringVec"> refhit32 @DatabasePath@/@FilePrefix@-referencehit.slcio referenceHit </parameter>
  <parameter name="SimpleFileHandler" type="StringVec"> refhit41 @DatabasePath@/@FilePrefix@-referencehit.slcio referenceHit </parameter>
  <parameter name="SimpleFileHandler" type="StringVec"> refhit42 @DatabasePath@/@FilePrefix@-referencehit.slcio referenceHit </parameter>
  <parameter name="SimpleFileHandler" type="StringVec"> refhit51 @DatabasePath@/@FilePrefix@-referencehit.slcio referenceHit </parameter>
  <parameter name="SimpleFileHandler" type="StringVec"> refhit52 @DatabasePath@/@FilePrefix@-referencehit.slcio referenceHit </parameter>
  <parameter name="SimpleFileHandler" type="StringVec"> prealign  @DatabasePath@/@PreAlignRun@-prealignment.slcio alignment </parameter>
  <parameter name="SimpleFileHandler" type="StringVec"> align @DatabasePath@/@FilePrefix@-alignmentGBL_newGBL.slcio alignment </parameter>
  <parameter name="SimpleFileHandler" type="StringVec"> align_it2 @DatabasePath@/@FilePrefix@-alignmentGBL_newGBL2.slcio alignment </parameter>
  <parameter name="SimpleFileHandler" type="StringVec"> align_it3 @DatabasePath@/@FilePrefix@-alignmentGBL_newGBL3.slcio alignment </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>


 <processor name="ApplyPreAlignment" type="EUTelApplyAlignmentProcessor">
 <!--Apply to the input hit the alignment corrections-->
  <!--Alignment constant from the condition file-->
  <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> prealign </parameter>
  <!--The name of the input hit collection-->
  <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> hit </parameter>
  <!--The name of the output hit collection-->
  <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> alignedPre </parameter>
  <!--Rotation Angle around X axis-->
  <!--parameter name="Alpha" type="double" value="0"/-->
  <!--Available directinos are:
 0 -> direct  
 1 -> reverse -->
  <parameter name="ApplyAlignmentDirection" type="int" value="0"/>
  <!--Do you want the reference hit collection to be corrected by the shifts and tilts from the alignment collection?-->
  <parameter name="ApplyToReferenceCollection" type="bool" value="1"/>
  <!--Rotation Angle around Y axis-->
  <!--parameter name="Beta" type="double" value="0"/-->
  <!--Available methods are:
 0 -> shift only 
 1 -> rotation first 
 2 -> shift first -->
  <parameter name="CorrectionMethod" type="int" value="1"/>
  <!--Enable or disable DEBUG mode -->
  <parameter name="DEBUG" type="bool" value="false"/>
  <!--Implement geometry shifts and rotations as described in alignmentCollectionName -->
  <parameter name="DoAlignCollection" type="bool" value="true"/>
  <!--Apply alignment steps in one go. Is supposed to be used for reversealignment in reverse order, like: undoAlignment, undoPreAlignment, undoGear -->
  <!--parameter name="DoAlignmentInOneGo" type="bool" value="false"/-->
  <!--Implement geometry shifts and rotations as described in GEAR steering file -->
  <!--parameter name="DoGear" type="bool" value="false"/-->
  <!--Rotation Angle around Z axis-->
  <!--parameter name="Gamma" type="double" value="0"/-->
  <!--Enable or disable histograms-->
  <parameter name="HistogramSwitch" type="bool" value="true"/>
  <!--This is the name of the modified output reference hit collection-->
  <!--parameter name="OutputReferenceCollection" type="string" value="output_refhit"/-->
  <!--Events number to have DEBUG1 printed outs (default=10)-->
  <parameter name="PrintEvents" type="int" value="0"/>
  <!--This is the name of the reference hit collection-->
  <parameter name="ReferenceCollection" type="string" value="refhit"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
  <!--List of alignment collections that were applied to the DUT-->
  <parameter name="alignmentCollectionNames" type="StringVec" value="prealign"/>
  <!--List of hit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="hitCollectionNames" type="StringVec" value="hitCollectionNames"/>
  <!--List of refhit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="refhitCollectionNames" type="StringVec" value="hitCollectionNames"/>
</processor>


 <processor name="ApplyAlignment" type="EUTelApplyAlignmentProcessor">
 <!--Apply to the input hit the alignment corrections-->
  <!--Alignment constant from the condition file-->
  <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> align </parameter>
  <!--The name of the input hit collection-->
  <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> alignedPre </parameter>
  <!--The name of the output hit collection-->
  <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> alignedHit </parameter>
  <!--Rotation Angle around X axis-->
  <!--parameter name="Alpha" type="double" value="0"/-->
  <!--Available directinos are:
 0 -> direct  
 1 -> reverse -->
  <parameter name="ApplyAlignmentDirection" type="int" value="0"/>
  <!--Do you want the reference hit collection to be corrected by the shifts and tilts from the alignment collection?-->
  <parameter name="ApplyToReferenceCollection" type="bool" value="1"/>
  <!--Rotation Angle around Y axis-->
  <!--parameter name="Beta" type="double" value="0"/-->
  <!--Available methods are:
 0 -> shift only 
 1 -> rotation first 
 2 -> shift first -->
  <parameter name="CorrectionMethod" type="int" value="1"/>
  <!--Enable or disable DEBUG mode -->
  <parameter name="DEBUG" type="bool" value="false"/>
  <!--Implement geometry shifts and rotations as described in alignmentCollectionName -->
  <parameter name="DoAlignCollection" type="bool" value="true"/>
  <!--Apply alignment steps in one go. Is supposed to be used for reversealignment in reverse order, like: undoAlignment, undoPreAlignment, undoGear -->
  <!--parameter name="DoAlignmentInOneGo" type="bool" value="false"/-->
  <!--Implement geometry shifts and rotations as described in GEAR steering file -->
  <!--parameter name="DoGear" type="bool" value="false"/-->
  <!--Rotation Angle around Z axis-->
  <!--parameter name="Gamma" type="double" value="0"/-->
  <!--Enable or disable histograms-->
  <parameter name="HistogramSwitch" type="bool" value="false"/>
  <!--This is the name of the modified output reference hit collection-->
  <!--parameter name="OutputReferenceCollection" type="string" value="output_refhit"/-->
  <!--Events number to have DEBUG1 printed outs (default=10)-->
  <parameter name="PrintEvents" type="int" value="0"/>
  <!--This is the name of the reference hit collection-->
  <parameter name="ReferenceCollection" type="string" value="refhit"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
  <!--List of alignment collections that were applied to the DUT-->
  <parameter name="alignmentCollectionNames" type="StringVec" value="align"/>
  <!--List of hit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="hitCollectionNames" type="StringVec" value="hitCollectionNames"/>
  <!--List of refhit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="refhitCollectionNames" type="StringVec" value="hitCollectionNames"/>
</processor>


<processor name="ApplyAlignment2" type="EUTelApplyAlignmentProcessor">
 <!--Apply to the input hit the alignment corrections-->
  <!--Alignment constant from the condition file-->
  <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> align_it2 </parameter>
  <!--The name of the input hit collection-->
  <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> alignedHit </parameter>
  <!--The name of the output hit collection-->
  <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> aligned2Hit </parameter>
  <!--Rotation Angle around X axis-->
  <!--parameter name="Alpha" type="double" value="0"/-->
  <!--Available directinos are:
 0 -> direct  
 1 -> reverse -->
  <parameter name="ApplyAlignmentDirection" type="int" value="0"/>
  <!--Do you want the reference hit collection to be corrected by the shifts and tilts from the alignment collection?-->
  <parameter name="ApplyToReferenceCollection" type="bool" value="1"/>
  <!--Rotation Angle around Y axis-->
  <!--parameter name="Beta" type="double" value="0"/-->
  <!--Available methods are:
 0 -> shift only 
 1 -> rotation first 
 2 -> shift first -->
  <parameter name="CorrectionMethod" type="int" value="1"/>
  <!--Enable or disable DEBUG mode -->
  <parameter name="DEBUG" type="bool" value="false"/>
  <!--Implement geometry shifts and rotations as described in alignmentCollectionName -->
  <parameter name="DoAlignCollection" type="bool" value="true"/>
  <!--Apply alignment steps in one go. Is supposed to be used for reversealignment in reverse order, like: undoAlignment, undoPreAlignment, undoGear -->
  <!--parameter name="DoAlignmentInOneGo" type="bool" value="false"/-->
  <!--Implement geometry shifts and rotations as described in GEAR steering file -->
  <!--parameter name="DoGear" type="bool" value="false"/-->
  <!--Rotation Angle around Z axis-->
  <!--parameter name="Gamma" type="double" value="0"/-->
  <!--Enable or disable histograms-->
  <parameter name="HistogramSwitch" type="bool" value="false"/>
  <!--This is the name of the modified output reference hit collection-->
  <!--parameter name="OutputReferenceCollection" type="string" value="output_refhit"/-->
  <!--Events number to have DEBUG1 printed outs (default=10)-->
  <parameter name="PrintEvents" type="int" value="0"/>
  <!--This is the name of the reference hit collection-->
  <parameter name="ReferenceCollection" type="string" value="refhit"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
  <!--List of alignment collections that were applied to the DUT-->
  <parameter name="alignmentCollectionNames" type="StringVec" value="align_it2"/>
  <!--List of hit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="hitCollectionNames" type="StringVec" value="hitCollectionNames"/>
  <!--List of refhit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="refhitCollectionNames" type="StringVec" value="hitCollectionNames"/>
</processor>

<processor name="ApplyAlignment3" type="EUTelApplyAlignmentProcessor">
 <!--Apply to the input hit the alignment corrections-->
  <!--Alignment constant from the condition file-->
  <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> align_it3 </parameter>
  <!--The name of the input hit collection-->
  <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> aligned2Hit </parameter>
  <!--The name of the output hit collection-->
  <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> aligned3Hit </parameter>
  <!--Rotation Angle around X axis-->
  <!--parameter name="Alpha" type="double" value="0"/-->
  <!--Available directinos are:
 0 -> direct  
 1 -> reverse -->
  <parameter name="ApplyAlignmentDirection" type="int" value="0"/>
  <!--Do you want the reference hit collection to be corrected by the shifts and tilts from the alignment collection?-->
  <parameter name="ApplyToReferenceCollection" type="bool" value="1"/>
  <!--Rotation Angle around Y axis-->
  <!--parameter name="Beta" type="double" value="0"/-->
  <!--Available methods are:
 0 -> shift only 
 1 -> rotation first 
 2 -> shift first -->
  <parameter name="CorrectionMethod" type="int" value="1"/>
  <!--Enable or disable DEBUG mode -->
  <parameter name="DEBUG" type="bool" value="false"/>
  <!--Implement geometry shifts and rotations as described in alignmentCollectionName -->
  <parameter name="DoAlignCollection" type="bool" value="true"/>
  <!--Apply alignment steps in one go. Is supposed to be used for reversealignment in reverse order, like: undoAlignment, undoPreAlignment, undoGear -->
  <!--parameter name="DoAlignmentInOneGo" type="bool" value="false"/-->
  <!--Implement geometry shifts and rotations as described in GEAR steering file -->
  <!--parameter name="DoGear" type="bool" value="false"/-->
  <!--Rotation Angle around Z axis-->
  <!--parameter name="Gamma" type="double" value="0"/-->
  <!--Enable or disable histograms-->
  <parameter name="HistogramSwitch" type="bool" value="false"/>
  <!--This is the name of the modified output reference hit collection-->
  <!--parameter name="OutputReferenceCollection" type="string" value="output_refhit"/-->
  <!--Events number to have DEBUG1 printed outs (default=10)-->
  <parameter name="PrintEvents" type="int" value="0"/>
  <!--This is the name of the reference hit collection-->
  <parameter name="ReferenceCollection" type="string" value="refhit"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
  <!--List of alignment collections that were applied to the DUT-->
  <parameter name="alignmentCollectionNames" type="StringVec" value="align_it3"/>
  <!--List of hit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="hitCollectionNames" type="StringVec" value="hitCollectionNames"/>
  <!--List of refhit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
  <parameter name="refhitCollectionNames" type="StringVec" value="hitCollectionNames"/>
</processor>


<group name="TelDUTFitter" >
  <!--Names of alignment collections, should be in same order as application-->
  <!--parameter name="AlignmentCollectionNames" type="StringVec" value="prealign align"/-->
  <!--List of sensor IDs for the DUT planes. Used to make the decision on whether ro accept the track or not. These planes are not used in track finder, and not in the track fitter unless option 'useDutsInFit' is set.-->
  <!--parameter name="DutPlanes" type="IntVec"> </parameter-->
  <!--Sigma of telescope resolution in the global X plane,-->
  <!--parameter name="DutResolutionX" type="float" value="4"/-->
  <!--Sigma of telescope resolution in the global Y plane,-->
  <!--parameter name="DutResolutionY" type="float" value="4"/-->
  <!--Beam energy [GeV], used to calculate amount of scatter-->
  <parameter name="Ebeam" type="float" value="@BeamEnergy@"/>
  <!--Names of input hit collections-->
  <!--parameter name="HitCollectionName" type="StringVec" value="alignedHit"/-->
  <!--parameter name="TrackCollectionName" type="string" lcioInType="Track"> track </parameter-->
  <!--How many DUT hits do we need in order to accept track?-->
  <!--parameter name="NDutHits" type="int" value="0"/-->
  <!--dx/dz assumed by track finder-->
  <!--parameter name="NominalDxdz" type="float" value="0.0"/-->
  <!--dy/dz assumed by track finder-->
  <!--parameter name="NominalDydz" type="float" value="0.0"/-->
  <!--Radiation lengths of planes.-->
  <!--parameter name="RadiationLengths" type="FloatVec"> </parameter-->
  <!--reference hit collection name -->
  <!--parameter name="ReferenceCollection" type="string" value="refhit"/-->
  <!--How many telescope planes do we require to be included in the fit?-->
  <!--parameter name="RequireNTelPlanes" type="float" value="5"/-->
  <!--Scale thickness of DUT planes-->
  <!--parameter name="ScaleScattering" type="float" value="1"/-->
  <!--Sigma of telescope resolution in the global X plane,-->
  <!--parameter name="TelResolutionX" type="float" value="3"/-->
  <!--Sigma of telescope resolution in the global Y plane,-->
  <!--parameter name="TelResolutionY" type="float" value="3"/-->
  <!--List of sensor IDs for the telescope planes. These planes are used for the track finder, and track fitter.-->
  <!--parameter name="TelescopePlanes" type="IntVec">  </parameter-->
  <!--parameter name="mccollections" type="StringVec"> alignedHit </parameter-->
  <!--resolution parameter for each plane in mm. Note: these numbers are ordered according to the z position of the sensors and NOT according to the sensor id.-->
  <parameter name="Resolution" type="FloatVec" value="@Resolution@"/>
  <!--thickness parameter for each plane in mm. Note: these numbers are ordered according to the z position of the sensors and NOT according to the sensor id.-->
  <parameter name="Thickness" type="FloatVec" value="@Thickness@"/>

  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value="DEBUG4"/-->
  <parameter name="dut_plane" type="int"> </parameter>

  <parameter name="InputCollectionTelescope" type="StringVec" value="aligned3Hit"/>
  <parameter name="matching_cut_x" type="double"> 0.15 </parameter>
  <parameter name="matching_cut_y" type="double"> 0.15 </parameter>
  <parameter name="slope_cut_x" type="double"> 0.002 </parameter>
  <parameter name="slope_cut_y" type="double"> 0.002 </parameter>

  <parameter name="kappa" type="double" value="@Kappa@"/>

  <parameter name="probchi2_cut" type="double" value="@Probchi2_cut@"/>

  <processor name="Fitter00" type="EUTelTripletGBL">
   <parameter name="dut_plane" type="int">  0 </parameter>
  </processor>
  
  <processor name="Fitter01" type="EUTelTripletGBL">
   <parameter name="dut_plane" type="int">  1 </parameter>
  </processor>
  
  <processor name="Fitter02" type="EUTelTripletGBL">
   <parameter name="dut_plane" type="int">  2 </parameter>
  </processor>
  
  <processor name="Fitter03" type="EUTelTripletGBL">
   <parameter name="dut_plane" type="int">  3 </parameter>
  </processor>
  
  <processor name="Fitter04" type="EUTelTripletGBL">
   <parameter name="dut_plane" type="int">  4 </parameter>
  </processor>
  
  <processor name="Fitter05" type="EUTelTripletGBL">
   <parameter name="dut_plane" type="int">  5 </parameter>  
  </processor>

  <processor name="Fitter06" type="EUTelTripletGBL">
   <parameter name="dut_plane" type="int">  -1 </parameter>
  </processor>


</group>




 <processor name="MyEUTelUtilityPrintEventNumber" type="EUTelUtilityPrintEventNumber">
 <!--EUTelUtilityPrintEventNumber prints event number to screen depending on the verbosity level-->
  <!--Print event number for every n-th event-->
  <parameter name="EveryNEvents" type="int" value="1000"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
  <!--print the event timestamp as read from LCIO-->
  <!--parameter name="printTimestamp" type="bool" value="false"/-->
</processor>

 <processor name="Save" type="EUTelOutputProcessor">
 <!--Writes the current event to the specified LCIO outputfile. Eventually it adds a EORE at the of the file if it was missing Needs to be the last ActiveProcessor.-->
  <!--drops the named collections from the event-->
  <parameter name="DropCollectionNames" type="StringVec"> hit hit_eta3x3 alignedHit_eta3x3 </parameter>
  <!--drops all collections of the given type from the event-->
  <!--parameter name="DropCollectionTypes" type="StringVec"> SimTrackerHit SimCalorimeterHit </parameter-->
  <!-- write complete objects in subset collections to the file (i.e. ignore subset flag)-->
  <!--parameter name="FullSubsetCollections" type="StringVec" value="MCParticlesSkimmed"/-->
  <!--force keep of the named collections - overrules DropCollectionTypes (and DropCollectionNames)-->
  <!--parameter name="KeepCollectionNames" type="StringVec" value="MyPreciousSimTrackerHits"/-->
  <!-- name of output file -->
  <parameter name="LCIOOutputFile" type="string" value="@LcioPath@/@FilePrefix@-track.slcio"/>
  <!--write mode for output file:  WRITE_APPEND or WRITE_NEW-->
  <parameter name="LCIOWriteMode" type="string" value="WRITE_NEW"/>
  <!--Set it to true to remove intermediate EORE in merged runs-->
  <parameter name="SkipIntermediateEORE" type="bool" value="true"/>
  <!--will split output file if size in kB exceeds given value - doesn't work with APPEND and NEW-->
  <!--parameter name="SplitFileSizekB" type="int" value="1992294"/-->
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

</marlin>
